# 1 "lexer.mll"
  
    open Support 


    let reservedWords = [
        ("~",   fun i -> Parser.NOT i);
        ("/\\", fun i -> Parser.AND i);
        ("\\/", fun i -> Parser.OR i);
        ("->",  fun i -> Parser.ARROW i);
        (";",   fun i -> Parser.SEMI i);
        ("Top", fun i -> Parser.TOP i);
        ("Bot", fun i -> Parser.BOT i);

        ("(",   fun i -> Parser.LPAREN i);
        (")",   fun i -> Parser.RPAREN i);
    ]

    let ios                 = int_of_string

    type tokenize           =   info -> Parser.token;;
    type tokentbl           =   (string,tokenize) Hashtbl.t;;
    let symboltbl:tokentbl  =   Hashtbl.create 1024;;
    let _                   =   List.iter (fun(str,f)->Hashtbl.add symboltbl str f) reservedWords
    let initCapital str     =   let s=String.get str 0 in s>='A' && s<='Z' 

    let createID i str      =   try     Hashtbl.find symboltbl str i
                                with _  ->  if initCapital str 
                                            then Parser.UCID {i=i;v=str} 
                                            else Parser.LCID {i=i;v=str};;

    let lineno              =   ref 1
    let depth               =   ref 0
    let start               =   ref 0
    let filename            =   ref ""
    let startLex            =   ref dummy 
    let create infile strm  =   if not(Filename.is_implicit infile)
                                    then filename   := infile
                                    else filename   := Filename.concat (Sys.getcwd()) infile;
                                lineno := 1; start := 0; Lexing.from_channel strm;;
    
    let newline lexbuf      =   incr lineno; start := 0; Lexing.lexeme_start lexbuf;;
    let info    lexbuf      =   createInfo (!filename) (!lineno) (Lexing.lexeme_start lexbuf - !start);;
    let text                =   Lexing.lexeme;;
    
    (* String *)
    let stringBuffer        =   ref (String.create 2048);;
    let stringEnd           =   ref 0;;
    let resetStr ()         =   stringEnd := 0;;
    let addStr chr          =   let x       = !stringEnd in 
                                let buffer  = !stringBuffer in 
                                if x = String.length buffer 
                                    then    let newBuffer   = String.create (x*2) in 
                                            String.blit buffer 0 newBuffer 0 x;
                                            String.set newBuffer x chr;
                                            stringBuffer    := newBuffer;
                                            stringEnd       := x+1
                                    else    String.set buffer x chr;
                                            stringEnd       := x+1;;
    let getStr ()           =   String.sub (!stringBuffer) 0 (!stringEnd) ;;
    let extract_lineno yytxt offset     = ios(String.sub yytxt offset(String.length yytxt - offset));;
    let out_of_char x fi    =   if x>255 then err fi"Illegal Char" else Char.chr x ;;

# 65 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\248\255\250\255\091\000\252\255\005\000\103\000\126\000\
    \166\000\228\000\254\255\001\000\016\000\142\000\249\255\004\000\
    \007\000\251\255\252\255\253\255\003\000\009\000\255\255\254\255\
    \122\000\251\255\252\255\253\255\254\255\255\255\061\001\249\255\
    \182\000\251\255\252\255\253\255\254\255\255\255\192\000\250\255\
    ";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\004\000\255\255\003\000\003\000\003\000\
    \003\000\002\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \006\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default =
   "\255\255\000\000\000\000\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \018\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \025\000\000\000\000\000\000\000\000\000\000\000\031\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\012\000\010\000\010\000\012\000\011\000\014\000\000\000\
    \000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\012\000\010\000\000\000\012\000\011\000\000\000\000\000\
    \012\000\004\000\002\000\004\000\003\000\003\000\003\000\004\000\
    \004\000\004\000\008\000\003\000\004\000\003\000\004\000\007\000\
    \012\000\020\000\023\000\022\000\000\000\000\000\021\000\000\000\
    \000\000\000\000\003\000\005\000\004\000\004\000\006\000\004\000\
    \013\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\004\000\003\000\004\000\006\000\009\000\
    \003\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\004\000\003\000\004\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\026\000\003\000\003\000\000\000\
    \003\000\000\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\003\000\003\000\000\000\003\000\003\000\003\000\013\000\
    \014\000\003\000\013\000\015\000\029\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \003\000\003\000\000\000\003\000\000\000\003\000\013\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\000\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\000\000\003\000\000\000\003\000\
    \000\000\000\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \003\000\003\000\000\000\003\000\000\000\003\000\027\000\003\000\
    \000\000\003\000\003\000\000\000\003\000\000\000\003\000\000\000\
    \003\000\000\000\000\000\003\000\003\000\003\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\003\000\000\000\003\000\000\000\000\000\000\000\
    \001\000\000\000\003\000\000\000\003\000\000\000\003\000\019\000\
    \000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\003\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\000\000\
    \000\000\000\000\000\000\009\000\000\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\034\000\
    \000\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\000\000\
    \000\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\037\000\000\000\000\000\000\000\000\000\
    \000\000\036\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\011\000\000\000\000\000\015\000\255\255\
    \255\255\016\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\012\000\012\000\255\255\012\000\012\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \012\000\016\000\020\000\021\000\255\255\255\255\016\000\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\255\255\255\255\024\000\003\000\003\000\255\255\
    \003\000\255\255\003\000\006\000\006\000\006\000\255\255\255\255\
    \255\255\006\000\006\000\255\255\006\000\003\000\006\000\013\000\
    \013\000\003\000\013\000\013\000\024\000\255\255\255\255\255\255\
    \255\255\006\000\007\000\007\000\007\000\006\000\255\255\255\255\
    \007\000\007\000\255\255\007\000\255\255\007\000\013\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \007\000\003\000\255\255\003\000\007\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\006\000\255\255\006\000\255\255\006\000\
    \255\255\255\255\008\000\008\000\008\000\255\255\255\255\255\255\
    \008\000\008\000\255\255\008\000\255\255\008\000\024\000\003\000\
    \255\255\003\000\007\000\255\255\007\000\255\255\007\000\255\255\
    \008\000\255\255\255\255\006\000\008\000\006\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\007\000\255\255\007\000\255\255\255\255\255\255\
    \000\000\255\255\008\000\255\255\008\000\255\255\008\000\016\000\
    \255\255\255\255\255\255\009\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\255\255\255\255\
    \255\255\255\255\008\000\255\255\008\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\255\255\
    \255\255\255\255\255\255\009\000\255\255\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\030\000\
    \255\255\255\255\255\255\255\255\030\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\255\255\
    \255\255\255\255\024\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\030\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\030\000\255\255\255\255\255\255\255\255\
    \255\255\030\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\030\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 76 "lexer.mll"
                            ( token lexbuf                                                                   )
# 255 "lexer.ml"

  | 1 ->
# 77 "lexer.mll"
                            ( newline lexbuf; token lexbuf                                                   )
# 260 "lexer.ml"

  | 2 ->
# 78 "lexer.mll"
                            ( createID (info lexbuf) (text lexbuf)                                          )
# 265 "lexer.ml"

  | 3 ->
# 79 "lexer.mll"
                            ( createID (info lexbuf) (text lexbuf)                                          )
# 270 "lexer.ml"

  | 4 ->
# 80 "lexer.mll"
                            ( createID (info lexbuf) (text lexbuf)                                          )
# 275 "lexer.ml"

  | 5 ->
# 81 "lexer.mll"
                            ( resetStr(); startLex := info lexbuf; string lexbuf                            )
# 280 "lexer.ml"

  | 6 ->
# 82 "lexer.mll"
                            ( Parser.DSEMI(info lexbuf)                                                     )
# 285 "lexer.ml"

  | 7 ->
# 83 "lexer.mll"
                            ( Parser.EOF(info lexbuf)                                                       )
# 290 "lexer.ml"

  | 8 ->
# 84 "lexer.mll"
                            ( err (info lexbuf) "Unmatched end of comment"                                  )
# 295 "lexer.ml"

  | 9 ->
# 85 "lexer.mll"
                            ( depth:=1; startLex := info lexbuf; comment lexbuf; token lexbuf               )
# 300 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 16
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 88 "lexer.mll"
                            ( depth := succ !depth; comment lexbuf                                          )
# 312 "lexer.ml"

  | 1 ->
# 89 "lexer.mll"
                            ( depth := pred !depth; if !depth>0 then comment lexbuf                         )
# 317 "lexer.ml"

  | 2 ->
# 90 "lexer.mll"
                            ( err(!startLex) "Comment not terminated"                                       )
# 322 "lexer.ml"

  | 3 ->
# 91 "lexer.mll"
                            ( comment lexbuf                                                                )
# 327 "lexer.ml"

  | 4 ->
# 92 "lexer.mll"
                            ( newline lexbuf; comment lexbuf                                                )
# 332 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 24
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 95 "lexer.mll"
                            ( Parser.STRINGV{i= !startLex; v=getStr()}                                      )
# 344 "lexer.ml"

  | 1 ->
# 96 "lexer.mll"
                            ( err(!startLex) "String not terminated"                                        )
# 349 "lexer.ml"

  | 2 ->
# 97 "lexer.mll"
                            ( addStr(escaped lexbuf)                    ; string lexbuf                     )
# 354 "lexer.ml"

  | 3 ->
# 98 "lexer.mll"
                            ( addStr('\n') ; newline lexbuf             ; string lexbuf                     )
# 359 "lexer.ml"

  | 4 ->
# 99 "lexer.mll"
                            ( addStr(Lexing.lexeme_char lexbuf 0)       ; string lexbuf                     )
# 364 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and escaped lexbuf =
   __ocaml_lex_escaped_rec lexbuf 30
and __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 102 "lexer.mll"
                            ( '\n'                                                                          )
# 376 "lexer.ml"

  | 1 ->
# 103 "lexer.mll"
                            ( '\t'                                                                          )
# 381 "lexer.ml"

  | 2 ->
# 104 "lexer.mll"
                            ( '\\'                                                                          )
# 386 "lexer.ml"

  | 3 ->
# 105 "lexer.mll"
                            ( '\034'                                                                        )
# 391 "lexer.ml"

  | 4 ->
# 106 "lexer.mll"
                            ( '\''                                                                          )
# 396 "lexer.ml"

  | 5 ->
# 107 "lexer.mll"
                            ( out_of_char (ios(text lexbuf)) (info lexbuf)                                  )
# 401 "lexer.ml"

  | 6 ->
# 108 "lexer.mll"
                                 ( err (info lexbuf) "Illegal character constant"                           )
# 406 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state

;;

