type token =
  | SHOWCONTEXT of (Support.Error.info)
  | LIST of (Support.Error.info)
  | TAIL of (Support.Error.info)
  | HEAD of (Support.Error.info)
  | ISNIL of (Support.Error.info)
  | CONS of (Support.Error.info)
  | NIL of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | FIX of (Support.Error.info)
  | STRING of (Support.Error.info)
  | FLOAT of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | TAG of (Support.Error.info)
  | AS of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | UNITTYPE of (Support.Error.info)
  | WHERE of (Support.Error.info)
  | IN of (Support.Error.info)
  | LET of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | NAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | UCID of (string  Support.Error.withinfo)
  | LCID of (string  Support.Error.withinfo)
  | INTV of (int     Support.Error.withinfo)
  | FLOATV of (float   Support.Error.withinfo)
  | STRINGV of (string  Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)
  | NEWLINE of (Support.Error.info)
  | DOUBLESEMI of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Format
open Support.Error
open Support.Pervasive
open Syntax
open Type
open Eval

let pe = print_endline 
# 91 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* SHOWCONTEXT *);
  258 (* LIST *);
  259 (* TAIL *);
  260 (* HEAD *);
  261 (* ISNIL *);
  262 (* CONS *);
  263 (* NIL *);
  264 (* LETREC *);
  265 (* FIX *);
  266 (* STRING *);
  267 (* FLOAT *);
  268 (* TIMESFLOAT *);
  269 (* CASE *);
  270 (* OF *);
  271 (* TAG *);
  272 (* AS *);
  273 (* UNIT *);
  274 (* UNITTYPE *);
  275 (* WHERE *);
  276 (* IN *);
  277 (* LET *);
  278 (* BOOL *);
  279 (* NAT *);
  280 (* SUCC *);
  281 (* PRED *);
  282 (* ISZERO *);
  283 (* LAMBDA *);
  284 (* IF *);
  285 (* THEN *);
  286 (* ELSE *);
  287 (* TRUE *);
  288 (* FALSE *);
  289 (* UCID *);
  290 (* LCID *);
  291 (* INTV *);
  292 (* FLOATV *);
  293 (* STRINGV *);
  294 (* APOSTROPHE *);
  295 (* DQUOTE *);
  296 (* ARROW *);
  297 (* BANG *);
  298 (* BARGT *);
  299 (* BARRCURLY *);
  300 (* BARRSQUARE *);
  301 (* COLON *);
  302 (* COLONCOLON *);
  303 (* COLONEQ *);
  304 (* COLONHASH *);
  305 (* COMMA *);
  306 (* DARROW *);
  307 (* DDARROW *);
  308 (* DOT *);
    0 (* EOF *);
  309 (* EQ *);
  310 (* EQEQ *);
  311 (* EXISTS *);
  312 (* GT *);
  313 (* HASH *);
  314 (* LCURLY *);
  315 (* LCURLYBAR *);
  316 (* LEFTARROW *);
  317 (* LPAREN *);
  318 (* LSQUARE *);
  319 (* LSQUAREBAR *);
  320 (* LT *);
  321 (* RCURLY *);
  322 (* RPAREN *);
  323 (* RSQUARE *);
  324 (* SEMI *);
  325 (* SLASH *);
  326 (* STAR *);
  327 (* TRIANGLE *);
  328 (* USCORE *);
  329 (* VBAR *);
  330 (* NEWLINE *);
  331 (* DOUBLESEMI *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\003\000\003\000\001\000\001\000\
\004\000\004\000\004\000\006\000\006\000\007\000\007\000\010\000\
\010\000\008\000\011\000\011\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\014\000\013\000\
\013\000\015\000\015\000\016\000\016\000\005\000\005\000\005\000\
\017\000\017\000\018\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\021\000\
\021\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\022\000\022\000\023\000\023\000\
\024\000\024\000\025\000\025\000\000\000\000\000"

let yylen = "\002\000\
\000\000\003\000\002\000\002\000\002\000\003\000\001\000\003\000\
\001\000\002\000\002\000\000\000\002\000\002\000\002\000\001\000\
\001\000\001\000\003\000\001\000\001\000\003\000\001\000\001\000\
\001\000\001\000\001\000\003\000\003\000\002\000\003\000\000\000\
\001\000\001\000\003\000\003\000\001\000\005\000\005\000\001\000\
\001\000\003\000\007\000\001\000\004\000\003\000\003\000\006\000\
\006\000\006\000\006\000\008\000\004\000\003\000\003\000\003\000\
\001\000\003\000\002\000\002\000\002\000\002\000\002\000\003\000\
\001\000\003\000\003\000\007\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\001\000\003\000\000\000\001\000\
\001\000\003\000\003\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\072\000\000\000\000\000\000\000\000\000\
\000\000\000\000\073\000\074\000\000\000\000\000\075\000\071\000\
\070\000\007\000\000\000\000\000\000\000\085\000\000\000\000\000\
\000\000\000\000\000\000\057\000\000\000\000\000\000\000\000\000\
\000\000\000\000\076\000\000\000\069\000\059\000\000\000\000\000\
\000\000\060\000\061\000\062\000\000\000\000\000\000\000\010\000\
\000\000\000\000\011\000\000\000\000\000\000\000\080\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\000\000\000\000\000\000\003\000\004\000\000\000\
\000\000\024\000\023\000\027\000\025\000\026\000\021\000\000\000\
\000\000\000\000\000\000\018\000\000\000\055\000\054\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\014\000\000\000\000\000\067\000\000\000\000\000\066\000\000\000\
\008\000\000\000\000\000\000\000\047\000\058\000\064\000\002\000\
\000\000\005\000\030\000\000\000\037\000\000\000\033\000\000\000\
\000\000\000\000\031\000\000\000\053\000\000\000\000\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\082\000\078\000\
\000\000\000\000\000\000\006\000\000\000\028\000\000\000\022\000\
\029\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\035\000\000\000\000\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\000\000\000\000\000\000\000\000\000"

let yydgoto = "\003\000\
\030\000\037\000\079\000\031\000\032\000\056\000\059\000\125\000\
\033\000\000\000\092\000\093\000\126\000\039\000\127\000\128\000\
\136\000\137\000\034\000\035\000\036\000\066\000\062\000\063\000\
\064\000"

let yysindex = "\111\000\
\001\000\000\000\000\000\207\254\207\254\207\254\207\254\207\254\
\238\254\046\002\214\000\000\000\232\254\046\002\046\002\046\002\
\249\254\214\000\000\000\000\000\239\254\226\254\000\000\000\000\
\000\000\000\000\000\001\214\000\011\255\000\000\248\254\026\255\
\016\255\046\002\035\255\000\000\152\255\215\255\046\002\046\002\
\046\002\046\002\000\000\045\255\000\000\000\000\254\254\066\255\
\067\255\000\000\000\000\000\000\071\255\076\255\215\255\000\000\
\215\255\214\000\000\000\074\255\032\255\065\255\000\000\083\255\
\063\255\068\255\080\255\001\000\101\255\102\255\214\000\106\255\
\125\255\000\000\046\002\215\255\069\255\000\000\000\000\006\255\
\215\255\000\000\000\000\000\000\000\000\000\000\000\000\189\255\
\215\255\189\255\075\255\000\000\103\255\000\000\000\000\000\000\
\046\002\215\255\081\255\214\000\214\000\215\255\214\000\000\000\
\000\000\032\255\214\000\000\000\000\001\214\000\000\000\214\000\
\000\000\094\255\095\255\032\255\000\000\000\000\000\000\000\000\
\172\000\000\000\000\000\117\255\000\000\098\255\000\000\115\255\
\104\255\111\255\000\000\215\255\000\000\119\255\134\255\000\000\
\108\255\014\255\019\255\122\255\077\255\032\255\000\000\000\000\
\225\254\214\000\214\000\000\000\215\255\000\000\189\255\000\000\
\000\000\000\000\214\000\129\255\081\255\214\000\214\000\214\000\
\214\000\159\255\032\255\032\255\000\000\000\000\024\255\156\255\
\000\000\032\255\032\255\032\255\032\255\215\255\214\000\136\255\
\000\000\032\255\143\255\033\002\046\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\255\021\255\000\000\000\000\
\000\000\000\000\130\255\000\000\000\000\000\000\000\000\042\255\
\029\255\058\001\099\000\000\000\194\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\243\001\233\254\000\000\000\000\131\255\
\132\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\137\255\
\000\000\141\255\000\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\086\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\208\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\001\000\000\000\000\000\000\000\000\023\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\255\034\255\000\000\000\000\000\000\000\000\
\000\000\126\001\139\001\157\001\170\001\000\000\000\000\000\000\
\000\000\198\001\000\000\000\000\024\001"

let yygindex = "\000\000\
\133\000\000\000\082\000\230\255\000\000\000\000\000\000\221\255\
\247\255\000\000\072\000\000\000\115\000\118\000\055\000\000\000\
\051\000\000\000\029\000\246\255\229\255\104\000\000\000\106\000\
\000\000"

let yytablesize = 878
let yytable = "\046\000\
\026\000\047\000\091\000\050\000\051\000\052\000\074\000\034\000\
\054\000\048\000\080\000\099\000\038\000\071\000\057\000\044\000\
\034\000\061\000\065\000\104\000\072\000\105\000\058\000\073\000\
\162\000\084\000\053\000\069\000\094\000\095\000\096\000\097\000\
\069\000\158\000\070\000\055\000\069\000\069\000\159\000\069\000\
\119\000\084\000\071\000\175\000\067\000\123\000\075\000\049\000\
\106\000\072\000\076\000\069\000\069\000\129\000\069\000\069\000\
\069\000\069\000\071\000\068\000\071\000\116\000\134\000\071\000\
\118\000\072\000\140\000\072\000\071\000\069\000\072\000\083\000\
\069\000\121\000\069\000\072\000\071\000\040\000\069\000\038\000\
\122\000\069\000\039\000\072\000\069\000\012\000\133\000\083\000\
\069\000\098\000\138\000\139\000\012\000\141\000\080\000\069\000\
\040\000\142\000\038\000\061\000\065\000\039\000\145\000\040\000\
\103\000\038\000\161\000\071\000\039\000\009\000\015\000\001\000\
\002\000\165\000\072\000\102\000\009\000\015\000\100\000\101\000\
\071\000\071\000\040\000\041\000\042\000\043\000\107\000\072\000\
\072\000\108\000\110\000\109\000\112\000\111\000\114\000\115\000\
\163\000\164\000\177\000\117\000\076\000\131\000\132\000\120\000\
\135\000\167\000\146\000\147\000\170\000\171\000\172\000\173\000\
\077\000\074\000\004\000\005\000\006\000\007\000\008\000\009\000\
\010\000\149\000\150\000\151\000\011\000\178\000\153\000\156\000\
\012\000\152\000\073\000\155\000\013\000\160\000\174\000\014\000\
\015\000\016\000\017\000\018\000\157\000\168\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\176\000\081\000\179\000\
\180\000\086\000\079\000\081\000\032\000\077\000\082\000\083\000\
\113\000\032\000\148\000\154\000\130\000\166\000\084\000\169\000\
\181\000\027\000\085\000\086\000\028\000\144\000\143\000\029\000\
\081\000\000\000\000\000\000\000\000\000\087\000\124\000\000\000\
\082\000\083\000\078\000\000\000\000\000\000\000\000\000\000\000\
\084\000\000\000\000\000\000\000\085\000\086\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\088\000\087\000\
\000\000\089\000\000\000\000\000\090\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\005\000\006\000\007\000\008\000\
\009\000\010\000\000\000\000\000\000\000\011\000\000\000\000\000\
\088\000\012\000\000\000\089\000\000\000\013\000\090\000\000\000\
\014\000\015\000\016\000\017\000\018\000\000\000\000\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\000\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\020\000\000\000\020\000\000\000\020\000\020\000\000\000\020\000\
\020\000\000\000\027\000\000\000\000\000\028\000\000\000\000\000\
\029\000\020\000\020\000\020\000\020\000\000\000\020\000\020\000\
\020\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\020\000\000\000\000\000\
\020\000\020\000\000\000\000\000\020\000\000\000\020\000\000\000\
\000\000\020\000\000\000\000\000\020\000\020\000\020\000\020\000\
\020\000\065\000\000\000\000\000\000\000\020\000\000\000\020\000\
\065\000\000\000\000\000\065\000\000\000\065\000\065\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\065\000\065\000\065\000\000\000\065\000\065\000\065\000\065\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\000\000\000\000\000\000\065\000\000\000\000\000\065\000\000\000\
\000\000\000\000\065\000\000\000\065\000\000\000\000\000\065\000\
\000\000\000\000\065\000\065\000\065\000\000\000\065\000\000\000\
\000\000\000\000\000\000\065\000\000\000\065\000\004\000\005\000\
\006\000\007\000\008\000\009\000\010\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\013\000\000\000\000\000\014\000\015\000\016\000\017\000\018\000\
\000\000\000\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\005\000\006\000\007\000\008\000\009\000\010\000\000\000\
\000\000\000\000\011\000\000\000\000\000\027\000\012\000\000\000\
\028\000\000\000\013\000\029\000\000\000\014\000\015\000\016\000\
\017\000\018\000\000\000\000\000\019\000\020\000\000\000\045\000\
\023\000\024\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\005\000\006\000\007\000\008\000\009\000\
\010\000\000\000\000\000\000\000\011\000\000\000\000\000\027\000\
\012\000\000\000\028\000\000\000\013\000\029\000\000\000\014\000\
\015\000\016\000\017\000\018\000\000\000\000\000\019\000\020\000\
\000\000\060\000\023\000\024\000\025\000\043\000\000\000\000\000\
\000\000\000\000\043\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\043\000\000\000\000\000\
\000\000\027\000\000\000\000\000\028\000\000\000\000\000\029\000\
\000\000\000\000\000\000\000\000\043\000\000\000\000\000\044\000\
\043\000\000\000\000\000\043\000\044\000\044\000\000\000\043\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\044\000\
\043\000\043\000\000\000\043\000\000\000\000\000\000\000\041\000\
\043\000\000\000\043\000\046\000\041\000\041\000\044\000\000\000\
\046\000\046\000\044\000\000\000\000\000\044\000\041\000\041\000\
\000\000\044\000\046\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\000\044\000\000\000\044\000\041\000\000\000\
\000\000\000\000\041\000\000\000\044\000\041\000\046\000\000\000\
\000\000\041\000\000\000\048\000\000\000\046\000\000\000\000\000\
\048\000\048\000\041\000\041\000\000\000\041\000\046\000\046\000\
\049\000\046\000\048\000\048\000\041\000\049\000\049\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\049\000\000\000\050\000\000\000\000\000\000\000\048\000\050\000\
\050\000\000\000\000\000\000\000\000\000\048\000\000\000\051\000\
\000\000\050\000\050\000\049\000\051\000\051\000\048\000\048\000\
\000\000\048\000\049\000\000\000\000\000\000\000\051\000\051\000\
\048\000\000\000\000\000\049\000\049\000\050\000\049\000\000\000\
\000\000\000\000\000\000\052\000\050\000\049\000\000\000\000\000\
\052\000\052\000\051\000\000\000\000\000\050\000\050\000\000\000\
\050\000\051\000\052\000\052\000\000\000\000\000\000\000\050\000\
\000\000\000\000\051\000\051\000\000\000\051\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\000\000\052\000\000\000\
\000\000\069\000\000\000\000\000\000\000\052\000\069\000\000\000\
\000\000\000\000\069\000\069\000\000\000\000\000\052\000\052\000\
\000\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\069\000\069\000\000\000\069\000\069\000\069\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\000\000\000\000\000\000\069\000\000\000\000\000\069\000\008\000\
\000\000\010\000\000\000\000\000\069\000\000\000\000\000\069\000\
\000\000\012\000\069\000\069\000\008\000\000\000\000\000\000\000\
\014\000\015\000\016\000\000\000\000\000\000\000\012\000\019\000\
\020\000\000\000\045\000\023\000\024\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\000\020\000\000\000\045\000\
\023\000\024\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\000\000\000\000\000\028\000\000\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\000\000\000\000\028\000\000\000\000\000\029\000"

let yycheck = "\010\000\
\000\000\011\000\038\000\014\000\015\000\016\000\034\000\056\001\
\018\000\034\001\037\000\014\001\062\001\045\001\045\001\034\001\
\065\001\027\000\028\000\055\000\052\001\057\000\053\001\034\000\
\056\001\049\001\034\001\007\001\039\000\040\000\041\000\042\000\
\012\001\020\001\019\001\053\001\016\001\017\001\020\001\019\001\
\076\000\065\001\045\001\020\001\034\001\081\000\012\001\072\001\
\058\000\052\001\016\001\031\001\032\001\089\000\034\001\035\001\
\036\001\037\001\045\001\068\001\045\001\071\000\098\000\045\001\
\075\000\052\001\102\000\052\001\045\001\049\001\052\001\049\001\
\052\001\068\001\049\001\052\001\045\001\049\001\058\001\049\001\
\075\001\061\001\049\001\052\001\064\001\068\001\097\000\065\001\
\068\001\045\001\100\000\101\000\075\001\103\000\121\000\075\001\
\068\001\107\000\068\001\109\000\110\000\068\001\112\000\075\001\
\029\001\075\001\030\001\045\001\075\001\068\001\068\001\001\000\
\002\000\149\000\052\001\045\001\075\001\075\001\053\001\053\001\
\045\001\045\001\005\000\006\000\007\000\008\000\053\001\052\001\
\052\001\065\001\068\001\049\001\053\001\066\001\034\001\034\001\
\146\000\147\000\174\000\034\001\016\001\067\001\040\001\075\001\
\064\001\155\000\053\001\053\001\158\000\159\000\160\000\161\000\
\001\001\181\000\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\045\001\065\001\049\001\013\001\175\000\056\001\034\001\
\017\001\066\001\181\000\053\001\021\001\052\001\016\001\024\001\
\025\001\026\001\027\001\028\001\073\001\053\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\034\001\002\001\056\001\
\050\001\000\000\065\001\065\001\056\001\066\001\010\001\011\001\
\068\000\065\001\121\000\132\000\090\000\151\000\018\001\157\000\
\180\000\058\001\022\001\023\001\061\001\110\000\109\000\064\001\
\002\001\255\255\255\255\255\255\255\255\033\001\034\001\255\255\
\010\001\011\001\075\001\255\255\255\255\255\255\255\255\255\255\
\018\001\255\255\255\255\255\255\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\058\001\033\001\
\255\255\061\001\255\255\255\255\064\001\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\058\001\017\001\255\255\061\001\255\255\021\001\064\001\255\255\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\007\001\255\255\255\255\255\255\255\255\
\012\001\255\255\014\001\255\255\016\001\017\001\255\255\019\001\
\020\001\255\255\058\001\255\255\255\255\061\001\255\255\255\255\
\064\001\029\001\030\001\031\001\032\001\255\255\034\001\035\001\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\045\001\255\255\255\255\255\255\049\001\255\255\255\255\
\052\001\053\001\255\255\255\255\056\001\255\255\058\001\255\255\
\255\255\061\001\255\255\255\255\064\001\065\001\066\001\067\001\
\068\001\007\001\255\255\255\255\255\255\073\001\255\255\075\001\
\014\001\255\255\255\255\017\001\255\255\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\031\001\032\001\255\255\034\001\035\001\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\045\001\
\255\255\255\255\255\255\049\001\255\255\255\255\052\001\255\255\
\255\255\255\255\056\001\255\255\058\001\255\255\255\255\061\001\
\255\255\255\255\064\001\065\001\066\001\255\255\068\001\255\255\
\255\255\255\255\255\255\073\001\255\255\075\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\255\255\255\255\255\255\
\013\001\255\255\255\255\255\255\017\001\255\255\255\255\255\255\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\013\001\255\255\255\255\058\001\017\001\255\255\
\061\001\255\255\021\001\064\001\255\255\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\255\255\034\001\
\035\001\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\013\001\255\255\255\255\058\001\
\017\001\255\255\061\001\255\255\021\001\064\001\255\255\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\031\001\032\001\
\255\255\034\001\035\001\036\001\037\001\014\001\255\255\255\255\
\255\255\255\255\019\001\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\058\001\255\255\255\255\061\001\255\255\255\255\064\001\
\255\255\255\255\255\255\255\255\045\001\255\255\255\255\014\001\
\049\001\255\255\255\255\052\001\019\001\020\001\255\255\056\001\
\255\255\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\065\001\066\001\255\255\068\001\255\255\255\255\255\255\014\001\
\073\001\255\255\075\001\014\001\019\001\020\001\045\001\255\255\
\019\001\020\001\049\001\255\255\255\255\052\001\029\001\030\001\
\255\255\056\001\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\065\001\066\001\255\255\068\001\045\001\255\255\
\255\255\255\255\049\001\255\255\075\001\052\001\049\001\255\255\
\255\255\056\001\255\255\014\001\255\255\056\001\255\255\255\255\
\019\001\020\001\065\001\066\001\255\255\068\001\065\001\066\001\
\014\001\068\001\029\001\030\001\075\001\019\001\020\001\255\255\
\075\001\255\255\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\255\255\014\001\255\255\255\255\255\255\049\001\019\001\
\020\001\255\255\255\255\255\255\255\255\056\001\255\255\014\001\
\255\255\029\001\030\001\049\001\019\001\020\001\065\001\066\001\
\255\255\068\001\056\001\255\255\255\255\255\255\029\001\030\001\
\075\001\255\255\255\255\065\001\066\001\049\001\068\001\255\255\
\255\255\255\255\255\255\014\001\056\001\075\001\255\255\255\255\
\019\001\020\001\049\001\255\255\255\255\065\001\066\001\255\255\
\068\001\056\001\029\001\030\001\255\255\255\255\255\255\075\001\
\255\255\255\255\065\001\066\001\255\255\068\001\255\255\255\255\
\255\255\255\255\255\255\255\255\075\001\255\255\049\001\255\255\
\255\255\007\001\255\255\255\255\255\255\056\001\012\001\255\255\
\255\255\255\255\016\001\017\001\255\255\255\255\065\001\066\001\
\255\255\068\001\255\255\255\255\255\255\255\255\255\255\255\255\
\075\001\031\001\032\001\255\255\034\001\035\001\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\045\001\
\255\255\255\255\255\255\049\001\255\255\255\255\052\001\007\001\
\255\255\009\001\255\255\255\255\058\001\255\255\255\255\061\001\
\255\255\017\001\064\001\065\001\007\001\255\255\255\255\255\255\
\024\001\025\001\026\001\255\255\255\255\255\255\017\001\031\001\
\032\001\255\255\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\255\255\034\001\
\035\001\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\058\001\255\255\255\255\061\001\255\255\255\255\
\064\001\255\255\255\255\255\255\255\255\255\255\255\255\058\001\
\255\255\255\255\061\001\255\255\255\255\064\001"

let yynames_const = "\
  "

let yynames_block = "\
  SHOWCONTEXT\000\
  LIST\000\
  TAIL\000\
  HEAD\000\
  ISNIL\000\
  CONS\000\
  NIL\000\
  LETREC\000\
  FIX\000\
  STRING\000\
  FLOAT\000\
  TIMESFLOAT\000\
  CASE\000\
  OF\000\
  TAG\000\
  AS\000\
  UNIT\000\
  UNITTYPE\000\
  WHERE\000\
  IN\000\
  LET\000\
  BOOL\000\
  NAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LAMBDA\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  NEWLINE\000\
  DOUBLESEMI\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
                                        ( fun ctx   ->  [],[]                                   )
# 600 "parser.ml"
               : Syntax.context -> (Syntax.command list * Syntax.context)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.context -> (Syntax.command list * Syntax.context)) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 119 "parser.mly"
                                        ( let _,ctx' = _1 [] in pr_ctx ctx';
                                          fun ctx   ->  [],ctx'                                 )
# 610 "parser.ml"
               : Syntax.context -> (Syntax.command list * Syntax.context)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.context -> (Syntax.command list * Syntax.context)) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 121 "parser.mly"
                                        ( fun ctx   ->  [],ctx                                  )
# 618 "parser.ml"
               : Syntax.context -> (Syntax.command list * Syntax.context)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.context -> (Syntax.command list * Syntax.context)) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'oneREPL) in
    Obj.repr(
# 122 "parser.mly"
                                        ( let _,ev_ctx  = _1 [] in  
                                          let cmds,_    = _2 ev_ctx in 
                                          let ev_ctx'   = process_commands ev_ctx cmds in 
                                          fun ctx   ->  [],ev_ctx'                              )
# 629 "parser.ml"
               : Syntax.context -> (Syntax.command list * Syntax.context)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 127 "parser.mly"
                                        ( fun ctx   ->  let cmd,ctx'    = _1 ctx in [cmd],ctx'  )
# 637 "parser.ml"
               : 'oneREPL))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'oneREPL) in
    Obj.repr(
# 128 "parser.mly"
                                        ( fun ctx   ->  let cmd,ctx'    = _1 ctx in 
                                                        let cmds,ctx''  = _3 ctx' in cmd::cmds,ctx''  )
# 647 "parser.ml"
               : 'oneREPL))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 132 "parser.mly"
                                        ( fun ctx   ->  [],ctx                                  )
# 654 "parser.ml"
               : Syntax.context -> (Syntax.command list * Syntax.context)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.context -> (Syntax.command list * Syntax.context)) in
    Obj.repr(
# 133 "parser.mly"
                                        ( fun ctx   ->  let cmd,ctx  = _1 ctx in 
                                                        let cmds,ctx = _3 ctx in cmd::cmds,ctx  )
# 664 "parser.ml"
               : Syntax.context -> (Syntax.command list * Syntax.context)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TermWrap) in
    Obj.repr(
# 137 "parser.mly"
                                        ( fun ctx   ->  let t = _1 ctx in Eval(tmInfo t,t),ctx  )
# 671 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 138 "parser.mly"
                                        ( fun ctx   ->  Bind(_1.i,_1.v,_2 ctx),addname ctx _1.v )
# 679 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 139 "parser.mly"
                                        ( fun ctx   ->  Bind(_1.i,_1.v,_2 ctx),addname ctx _1.v )
# 687 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                                        ( fun ctx   ->  BindTyVar                               )
# 693 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 142 "parser.mly"
                                        ( fun ctx   ->  BindTyAbb(_2 ctx)                       )
# 701 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 144 "parser.mly"
                                        ( fun ctx   ->  BindTmVar(_2 ctx)                         )
# 709 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 145 "parser.mly"
                                        ( fun ctx   ->  BindTmAbb(_2 ctx,None)                  )
# 717 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 149 "parser.mly"
                                        ( fun ctx   ->  TyBool                                  )
# 724 "parser.ml"
               : 'Univ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 150 "parser.mly"
                                        ( fun ctx   ->  TyNat                                   )
# 731 "parser.ml"
               : 'Univ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 153 "parser.mly"
                                        ( _1                                                    )
# 738 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 155 "parser.mly"
                                        ( fun ctx   ->  TyArr(_1 ctx, _3 ctx)                   )
# 747 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 156 "parser.mly"
                                        ( _1                                                    )
# 754 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 158 "parser.mly"
                                        ( fun ctx   ->  if isnamebound ctx _1.v then 
                                                        TyVar(name2index _1.i ctx _1.v, ctxlen ctx) else 
                                                            error _1.i"Type Not Found"            )
# 763 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 161 "parser.mly"
                                        ( _2                                                    )
# 772 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 162 "parser.mly"
                                        ( fun ctx   ->  TyFloat                                 )
# 779 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 163 "parser.mly"
                                        ( fun ctx   ->  TyString                                )
# 786 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 164 "parser.mly"
                                        ( fun ctx   ->  TyBool                                  )
# 793 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 165 "parser.mly"
                                        ( fun ctx   ->  TyNat                                   )
# 800 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 166 "parser.mly"
                                        ( fun ctx   ->  TyUnit                                  )
# 807 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TyFields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 167 "parser.mly"
                                        ( fun ctx   ->  TyRecord(_2 ctx 1)                      )
# 816 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TyFields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 168 "parser.mly"
                                        ( fun ctx   ->  TyVariant(_2 ctx 1)                     )
# 825 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 169 "parser.mly"
                                        ( fun ctx   ->  TyList(_2 ctx)                          )
# 833 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 171 "parser.mly"
                                        ( fun ctx   ->  TyList(_2 ctx)                          )
# 842 "parser.ml"
               : 'LType))
; (fun __caml_parser_env ->
    Obj.repr(
# 173 "parser.mly"
                                        ( fun ctx   ->  fun i -> []                             )
# 848 "parser.ml"
               : 'TyFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NETyFields) in
    Obj.repr(
# 174 "parser.mly"
                                        ( _1                                                    )
# 855 "parser.ml"
               : 'TyFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TyField) in
    Obj.repr(
# 176 "parser.mly"
                                        ( fun ctx   ->  fun i -> [_1 ctx i]                     )
# 862 "parser.ml"
               : 'NETyFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'TyField) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NETyFields) in
    Obj.repr(
# 177 "parser.mly"
                                        ( fun ctx   ->  fun i -> (_1 ctx i)::(_3 ctx (i+1))     )
# 871 "parser.ml"
               : 'NETyFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 179 "parser.mly"
                                        ( fun ctx   ->  fun i -> (_1.v, _3 ctx)                 )
# 880 "parser.ml"
               : 'TyField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 180 "parser.mly"
                                        ( fun ctx   ->  fun i -> (string_of_int i, _1 ctx)      )
# 887 "parser.ml"
               : 'TyField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'TermWrap) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 183 "parser.mly"
                                        ( fun ctx   ->  TmLet(_2,_3.v,_5 ctx,_1(addname ctx _3.v)) )
# 898 "parser.ml"
               : 'TermWrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 184 "parser.mly"
                                        ( fun ctx   ->  TmLet(_2,_3.v,_5 ctx,_1(addname ctx _3.v)) )
# 909 "parser.ml"
               : 'TermWrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 185 "parser.mly"
                                        ( _1                                                    )
# 916 "parser.ml"
               : 'TermWrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 187 "parser.mly"
                                        ( fun ctx   ->  [_1 ctx]                                )
# 923 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 188 "parser.mly"
                                        ( fun ctx   ->  (_1 ctx)::(_3 ctx)                      )
# 932 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string  Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 190 "parser.mly"
                                        ( fun ctx   ->  (_2.v,(_4.v,_7(addname ctx _4.v)))      )
# 945 "parser.ml"
               : 'Case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 192 "parser.mly"
                                        ( _1                                                    )
# 952 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 193 "parser.mly"
                                        ( fun ctx   ->  TmCase(_1,_2 ctx,_4 ctx)                )
# 962 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 194 "parser.mly"
                                        ( fun ctx   ->  TmLet(_2, "_", _3 ctx, _1 ctx)          )
# 971 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 195 "parser.mly"
                                        ( fun ctx   ->  TmProj(_2, _1 ctx, _3.v)                )
# 980 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 196 "parser.mly"
                                        ( fun ctx   ->  TmLet(_1,_2.v,_4 ctx,_6(addname ctx _2.v)))
# 992 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 197 "parser.mly"
                                        ( fun ctx   ->  TmLet(_1,"_",_4 ctx,_6(addname ctx"_")) )
# 1004 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 198 "parser.mly"
                                        ( fun ctx   ->  TmAbs(_1,_2.v,_4 ctx,_6(addname ctx _2.v)))
# 1016 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 199 "parser.mly"
                                        ( fun ctx   ->  TmIf(_1,_2 ctx,_4 ctx,_6 ctx)           )
# 1028 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 201 "parser.mly"
                                        ( fun ctx   ->  let ctx' = addname ctx _2.v in 
                                                        TmLet(_1,_2.v,TmFix(_1,TmAbs(_1,_2.v,_4 ctx,_6 ctx')),_8 ctx'))
# 1043 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LType) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ATerm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 203 "parser.mly"
                                        ( fun ctx   ->  TmCons(_1,_2 ctx,_3 ctx,_4 ctx)         )
# 1053 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'LType) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 204 "parser.mly"
                                        ( fun ctx   ->  TmHead(_1,_2 ctx,_3 ctx)                )
# 1062 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'LType) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 205 "parser.mly"
                                        ( fun ctx   ->  TmTail(_1,_2 ctx,_3 ctx)                )
# 1071 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'LType) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 206 "parser.mly"
                                        ( fun ctx   ->  TmIsNil(_1,_2 ctx,_3 ctx)               )
# 1080 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 208 "parser.mly"
                                        ( _1                                                    )
# 1087 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 209 "parser.mly"
                                        ( fun ctx   ->  TmTimesfloat(_2,_1 ctx,_3 ctx)          )
# 1096 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 210 "parser.mly"
                                        ( fun ctx   ->  TmFix(_1, _2 ctx )                      )
# 1104 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 211 "parser.mly"
                                        ( fun ctx   ->  TmSucc(_1, _2 ctx )                     )
# 1112 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 212 "parser.mly"
                                        ( fun ctx   ->  TmPred(_1, _2 ctx )                     )
# 1120 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 213 "parser.mly"
                                        ( fun ctx   ->  TmIsZero(_1, _2 ctx)                    )
# 1128 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 214 "parser.mly"
                                        ( fun ctx   ->  let t=_1 ctx in TmApp(tmInfo t,t,_2 ctx))
# 1136 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 216 "parser.mly"
                                        ( fun ctx   ->  TmAscribe(_2,_1 ctx,_3 ctx)             )
# 1145 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 217 "parser.mly"
                                        ( _1                                                    )
# 1152 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 219 "parser.mly"
                                        ( _2                                                    )
# 1161 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 220 "parser.mly"
                                        ( fun ctx   ->  TmRecord(_1,_2 ctx 1)                   )
# 1170 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 221 "parser.mly"
                                        ( fun ctx   ->  TmTag(_1,_2.v,_4 ctx,_7 ctx)            )
# 1183 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 222 "parser.mly"
                                        ( fun ctx   ->  TmVar(_1.i,name2index _1.i ctx _1.v,ctxlen ctx) )
# 1190 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 223 "parser.mly"
                                        ( fun ctx   ->  TmString(_1.i,_1.v)                     )
# 1197 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float   Support.Error.withinfo) in
    Obj.repr(
# 224 "parser.mly"
                                        ( fun ctx   ->  TmFloat(_1.i,_1.v)                      )
# 1204 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 225 "parser.mly"
                                        ( fun ctx   ->  TmUnit(_1)                              )
# 1211 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 226 "parser.mly"
                                        ( fun ctx   ->  TmTrue(_1)                              )
# 1218 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 227 "parser.mly"
                                        ( fun ctx   ->  TmFalse(_1)                             )
# 1225 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int     Support.Error.withinfo) in
    Obj.repr(
# 228 "parser.mly"
                                        ( fun ctx   ->  let rec f = function
                                                            | 0 -> TmZero(_1.i)
                                                            | n -> TmSucc(_1.i,f(n-1))in f _1.v )
# 1234 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'LType) in
    Obj.repr(
# 231 "parser.mly"
                                        ( fun ctx   ->  TmNil(_1,_2 ctx)                        )
# 1242 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 233 "parser.mly"
                                        ( _1                                                    )
# 1249 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 234 "parser.mly"
                                        ( fun ctx   ->  TmApp(_2,TmAbs(_2,"_",TyUnit,_3(addname ctx"_")),_1 ctx) )
# 1258 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    Obj.repr(
# 237 "parser.mly"
                                        ( fun ctx   ->  fun i -> []                             )
# 1264 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 238 "parser.mly"
                                        ( _1                                                    )
# 1271 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 240 "parser.mly"
                                        ( fun ctx   -> fun i -> [ _1 ctx i ]                    )
# 1278 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 241 "parser.mly"
                                        ( fun ctx   -> fun i -> (_1 ctx i)::(_3 ctx(i+1))       )
# 1287 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 243 "parser.mly"
                                        ( fun ctx   -> fun i -> (_1.v, _3 ctx)                  )
# 1296 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 244 "parser.mly"
                                        ( fun ctx   -> fun i -> (string_of_int i, _1 ctx)       )
# 1303 "parser.ml"
               : 'Field))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry input *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.context -> (Syntax.command list * Syntax.context))
let input (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Syntax.context -> (Syntax.command list * Syntax.context))
