type token =
  | LOAD of (string  Support.Error.withinfo)
  | SHOWCONTEXT of (Support.Error.info)
  | TYPE of (Support.Error.info)
  | REC of (Support.Error.info)
  | FOLD of (Support.Error.info)
  | UNFOLD of (Support.Error.info)
  | TOP of (Support.Error.info)
  | SOURCE of (Support.Error.info)
  | SINK of (Support.Error.info)
  | REF of (Support.Error.info)
  | REFTYPE of (Support.Error.info)
  | LIST of (Support.Error.info)
  | TAIL of (Support.Error.info)
  | HEAD of (Support.Error.info)
  | ISNIL of (Support.Error.info)
  | CONS of (Support.Error.info)
  | NIL of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | FIX of (Support.Error.info)
  | STRING of (Support.Error.info)
  | FLOAT of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | TAG of (Support.Error.info)
  | AS of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | UNITTYPE of (Support.Error.info)
  | WHERE of (Support.Error.info)
  | IN of (Support.Error.info)
  | LET of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | NAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | UCID of (string  Support.Error.withinfo)
  | LCID of (string  Support.Error.withinfo)
  | INTV of (int     Support.Error.withinfo)
  | FLOATV of (float   Support.Error.withinfo)
  | STRINGV of (string  Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)
  | NEWLINE of (Support.Error.info)
  | DOUBLESEMI of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Format
open Support.Error
open Support.Pervasive
open Syntax
open Type
open Eval
open Interpreter 

let pe = print_endline 
# 102 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* LOAD *);
  258 (* SHOWCONTEXT *);
  259 (* TYPE *);
  260 (* REC *);
  261 (* FOLD *);
  262 (* UNFOLD *);
  263 (* TOP *);
  264 (* SOURCE *);
  265 (* SINK *);
  266 (* REF *);
  267 (* REFTYPE *);
  268 (* LIST *);
  269 (* TAIL *);
  270 (* HEAD *);
  271 (* ISNIL *);
  272 (* CONS *);
  273 (* NIL *);
  274 (* LETREC *);
  275 (* FIX *);
  276 (* STRING *);
  277 (* FLOAT *);
  278 (* TIMESFLOAT *);
  279 (* CASE *);
  280 (* OF *);
  281 (* TAG *);
  282 (* AS *);
  283 (* UNIT *);
  284 (* UNITTYPE *);
  285 (* WHERE *);
  286 (* IN *);
  287 (* LET *);
  288 (* BOOL *);
  289 (* NAT *);
  290 (* SUCC *);
  291 (* PRED *);
  292 (* ISZERO *);
  293 (* LAMBDA *);
  294 (* IF *);
  295 (* THEN *);
  296 (* ELSE *);
  297 (* TRUE *);
  298 (* FALSE *);
  299 (* UCID *);
  300 (* LCID *);
  301 (* INTV *);
  302 (* FLOATV *);
  303 (* STRINGV *);
  304 (* APOSTROPHE *);
  305 (* DQUOTE *);
  306 (* ARROW *);
  307 (* BANG *);
  308 (* BARGT *);
  309 (* BARRCURLY *);
  310 (* BARRSQUARE *);
  311 (* COLON *);
  312 (* COLONCOLON *);
  313 (* COLONEQ *);
  314 (* COLONHASH *);
  315 (* COMMA *);
  316 (* DARROW *);
  317 (* DDARROW *);
  318 (* DOT *);
    0 (* EOF *);
  319 (* EQ *);
  320 (* EQEQ *);
  321 (* EXISTS *);
  322 (* GT *);
  323 (* HASH *);
  324 (* LCURLY *);
  325 (* LCURLYBAR *);
  326 (* LEFTARROW *);
  327 (* LPAREN *);
  328 (* LSQUARE *);
  329 (* LSQUAREBAR *);
  330 (* LT *);
  331 (* RCURLY *);
  332 (* RPAREN *);
  333 (* RSQUARE *);
  334 (* SEMI *);
  335 (* SLASH *);
  336 (* STAR *);
  337 (* TRIANGLE *);
  338 (* USCORE *);
  339 (* VBAR *);
  340 (* NEWLINE *);
  341 (* DOUBLESEMI *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\003\000\003\000\001\000\
\001\000\004\000\004\000\004\000\006\000\006\000\007\000\007\000\
\008\000\008\000\008\000\008\000\008\000\010\000\010\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\013\000\012\000\012\000\014\000\014\000\015\000\
\015\000\005\000\005\000\005\000\016\000\016\000\017\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\020\000\
\020\000\020\000\021\000\021\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\022\000\
\022\000\023\000\023\000\024\000\024\000\025\000\025\000\000\000\
\000\000"

let yylen = "\002\000\
\000\000\002\000\003\000\002\000\002\000\002\000\003\000\001\000\
\003\000\001\000\002\000\002\000\000\000\002\000\002\000\002\000\
\001\000\004\000\002\000\002\000\002\000\003\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\002\000\003\000\000\000\001\000\001\000\003\000\003\000\
\001\000\005\000\005\000\001\000\001\000\003\000\007\000\001\000\
\006\000\006\000\006\000\006\000\006\000\008\000\004\000\003\000\
\004\000\003\000\003\000\003\000\001\000\002\000\003\000\004\000\
\004\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\001\000\003\000\001\000\003\000\003\000\007\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000\001\000\
\003\000\000\000\001\000\001\000\003\000\003\000\001\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\083\000\000\000\
\000\000\000\000\000\000\000\000\000\000\084\000\085\000\000\000\
\000\000\086\000\082\000\081\000\000\000\008\000\000\000\000\000\
\000\000\096\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\
\000\000\000\000\000\000\087\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\000\000\000\000\012\000\000\000\000\000\095\000\000\000\
\091\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\000\000\000\004\000\
\005\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\
\028\000\027\000\031\000\029\000\030\000\025\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\059\000\058\000\
\060\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\015\000\016\000\000\000\078\000\000\000\000\000\
\077\000\000\000\009\000\000\000\000\000\000\000\075\000\000\000\
\072\000\073\000\003\000\000\000\006\000\000\000\020\000\021\000\
\019\000\034\000\000\000\041\000\000\000\037\000\000\000\000\000\
\000\000\064\000\000\000\065\000\035\000\057\000\000\000\000\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\094\000\
\093\000\089\000\000\000\000\000\000\000\007\000\000\000\000\000\
\032\000\000\000\024\000\033\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\043\000\
\018\000\040\000\039\000\000\000\000\000\046\000\052\000\053\000\
\049\000\050\000\051\000\000\000\000\000\000\000\079\000\054\000\
\000\000\000\000\000\000"

let yydgoto = "\003\000\
\034\000\042\000\089\000\035\000\036\000\065\000\068\000\148\000\
\037\000\107\000\108\000\149\000\048\000\150\000\151\000\161\000\
\162\000\038\000\039\000\040\000\041\000\076\000\072\000\073\000\
\074\000"

let yysindex = "\038\000\
\001\000\000\000\000\000\202\254\210\254\090\004\213\254\213\254\
\213\254\213\254\213\254\001\255\090\004\135\000\000\000\226\254\
\090\004\090\004\090\004\227\254\135\000\000\000\000\000\249\254\
\217\254\000\000\000\000\000\000\090\004\000\000\202\000\135\000\
\007\255\000\000\242\254\012\255\043\255\059\004\049\255\244\254\
\000\000\181\255\135\255\135\255\000\000\015\255\135\255\090\004\
\090\004\090\004\090\004\000\000\024\255\015\255\058\255\029\255\
\030\255\015\255\015\255\015\255\040\255\041\255\059\255\135\255\
\000\000\135\255\135\000\000\000\015\255\036\255\000\000\027\255\
\000\000\042\255\033\255\031\255\045\255\001\000\068\255\070\255\
\245\000\015\255\135\255\090\004\022\255\000\000\032\255\000\000\
\000\000\199\254\078\255\000\000\214\003\214\003\214\003\135\255\
\000\000\000\000\000\000\000\000\000\000\000\000\026\255\135\255\
\026\255\046\255\000\000\074\255\048\255\053\255\000\000\000\000\
\000\000\090\004\135\255\057\255\135\000\135\000\135\255\135\255\
\135\000\000\000\000\000\000\000\135\000\000\000\202\000\135\000\
\000\000\135\000\000\000\071\255\072\255\090\004\000\000\015\255\
\000\000\000\000\000\000\068\000\000\000\076\255\000\000\000\000\
\000\000\000\000\085\255\000\000\066\255\000\000\086\255\073\255\
\067\255\000\000\214\003\000\000\000\000\000\000\087\255\104\255\
\000\000\069\255\121\255\123\255\092\255\095\255\118\255\000\000\
\000\000\000\000\093\255\135\000\135\000\000\000\135\255\135\255\
\000\000\026\255\000\000\000\000\000\000\135\000\099\255\057\255\
\135\000\135\000\135\000\135\000\135\000\138\255\000\000\000\000\
\000\000\000\000\000\000\136\255\125\255\000\000\000\000\000\000\
\000\000\000\000\000\000\135\255\135\000\105\255\000\000\000\000\
\112\255\245\000\090\004"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\219\254\
\170\003\000\000\000\000\000\000\000\000\000\000\106\255\000\000\
\000\000\000\000\000\000\220\254\214\254\221\003\087\001\147\001\
\000\000\179\000\000\000\000\000\000\000\207\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\002\000\000\000\000\
\000\000\071\002\131\002\191\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\251\002\051\004\000\000\000\000\
\000\000\109\255\113\255\000\000\000\000\000\000\000\000\000\000\
\000\000\055\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\110\255\000\000\
\114\255\000\000\000\000\025\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\234\003\000\000\115\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\212\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\255"

let yygindex = "\000\000\
\110\000\000\000\050\000\220\255\000\000\000\000\000\000\217\255\
\244\255\037\000\252\255\096\000\077\000\024\000\000\000\023\000\
\000\000\178\255\012\000\250\255\000\000\082\000\000\000\084\000\
\000\000"

let yytablesize = 1444
let yytable = "\046\000\
\030\000\055\000\134\000\106\000\109\000\090\000\054\000\110\000\
\063\000\084\000\058\000\059\000\060\000\056\000\061\000\066\000\
\044\000\043\000\071\000\075\000\140\000\038\000\069\000\067\000\
\122\000\044\000\123\000\141\000\047\000\091\000\038\000\082\000\
\092\000\093\000\094\000\044\000\095\000\096\000\001\000\002\000\
\013\000\010\000\044\000\135\000\053\000\097\000\098\000\013\000\
\010\000\085\000\077\000\057\000\062\000\099\000\124\000\064\000\
\146\000\100\000\101\000\111\000\112\000\113\000\114\000\078\000\
\152\000\137\000\138\000\047\000\102\000\147\000\079\000\080\000\
\047\000\047\000\083\000\159\000\085\000\136\000\115\000\165\000\
\166\000\116\000\047\000\047\000\049\000\050\000\051\000\052\000\
\143\000\144\000\145\000\117\000\118\000\103\000\119\000\120\000\
\104\000\121\000\125\000\105\000\127\000\126\000\047\000\090\000\
\163\000\164\000\129\000\130\000\167\000\047\000\128\000\132\000\
\168\000\133\000\071\000\075\000\139\000\171\000\047\000\047\000\
\142\000\047\000\154\000\155\000\156\000\158\000\047\000\082\000\
\047\000\157\000\160\000\211\000\180\000\172\000\173\000\193\000\
\194\000\175\000\091\000\176\000\177\000\092\000\093\000\094\000\
\178\000\095\000\096\000\183\000\179\000\182\000\185\000\184\000\
\186\000\187\000\097\000\098\000\188\000\189\000\190\000\191\000\
\192\000\197\000\099\000\204\000\207\000\205\000\100\000\101\000\
\206\000\196\000\209\000\210\000\199\000\200\000\201\000\202\000\
\203\000\102\000\097\000\036\000\090\000\086\000\087\000\092\000\
\036\000\004\000\005\000\131\000\088\000\174\000\006\000\181\000\
\208\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\153\000\195\000\103\000\014\000\082\000\104\000\198\000\015\000\
\105\000\170\000\169\000\016\000\000\000\000\000\017\000\018\000\
\019\000\020\000\021\000\000\000\000\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\000\000\000\000\000\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\000\000\000\000\032\000\000\000\000\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\005\000\000\000\
\000\000\088\000\006\000\000\000\000\000\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\000\000\000\000\000\000\014\000\
\000\000\000\000\000\000\015\000\000\000\000\000\000\000\016\000\
\000\000\000\000\017\000\018\000\019\000\020\000\021\000\000\000\
\000\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\031\000\000\000\000\000\032\000\
\004\000\005\000\033\000\000\000\000\000\006\000\000\000\000\000\
\007\000\008\000\009\000\010\000\011\000\012\000\013\000\000\000\
\000\000\000\000\014\000\000\000\000\000\000\000\015\000\000\000\
\000\000\000\000\016\000\000\000\000\000\017\000\018\000\019\000\
\020\000\021\000\000\000\000\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\000\000\000\000\000\000\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
\000\000\000\000\032\000\004\000\005\000\033\000\000\000\000\000\
\006\000\000\000\000\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\000\000\000\000\000\000\014\000\000\000\000\000\
\000\000\015\000\000\000\000\000\000\000\016\000\000\000\000\000\
\017\000\018\000\019\000\020\000\021\000\000\000\000\000\022\000\
\023\000\000\000\045\000\026\000\027\000\028\000\000\000\000\000\
\000\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\000\000\000\000\000\032\000\004\000\005\000\
\033\000\000\000\000\000\006\000\000\000\000\000\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000\000\000\000\000\000\000\
\014\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
\016\000\000\000\000\000\017\000\018\000\019\000\020\000\021\000\
\000\000\000\000\022\000\023\000\000\000\070\000\026\000\027\000\
\028\000\004\000\005\000\000\000\029\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\000\000\013\000\
\000\000\000\000\000\000\000\000\000\000\031\000\000\000\015\000\
\032\000\000\000\000\000\033\000\000\000\000\000\017\000\018\000\
\019\000\000\000\000\000\000\000\000\000\022\000\023\000\000\000\
\045\000\026\000\027\000\028\000\000\000\000\000\000\000\029\000\
\000\000\023\000\000\000\000\000\000\000\000\000\023\000\000\000\
\023\000\000\000\023\000\023\000\000\000\023\000\023\000\000\000\
\031\000\000\000\000\000\032\000\000\000\000\000\033\000\023\000\
\023\000\023\000\023\000\000\000\023\000\023\000\023\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\000\000\023\000\000\000\000\000\023\000\023\000\
\000\000\000\000\023\000\000\000\023\000\000\000\000\000\023\000\
\000\000\000\000\023\000\023\000\023\000\023\000\023\000\076\000\
\000\000\000\000\000\000\023\000\076\000\023\000\076\000\000\000\
\000\000\076\000\000\000\076\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\076\000\076\000\076\000\
\076\000\000\000\076\000\076\000\076\000\076\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\
\000\000\076\000\000\000\000\000\076\000\000\000\000\000\000\000\
\076\000\000\000\076\000\000\000\000\000\076\000\000\000\000\000\
\076\000\076\000\076\000\061\000\076\000\000\000\000\000\000\000\
\000\000\076\000\061\000\076\000\000\000\061\000\000\000\061\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\061\000\061\000\061\000\000\000\061\000\061\000\
\061\000\061\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\061\000\000\000\061\000\000\000\000\000\
\000\000\000\000\000\000\000\000\061\000\000\000\061\000\000\000\
\000\000\061\000\000\000\000\000\061\000\061\000\061\000\067\000\
\061\000\000\000\000\000\000\000\000\000\061\000\067\000\061\000\
\000\000\067\000\000\000\067\000\067\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\067\000\067\000\067\000\
\067\000\000\000\067\000\067\000\067\000\067\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\000\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\000\000\067\000\000\000\000\000\067\000\000\000\000\000\
\067\000\067\000\067\000\066\000\067\000\000\000\000\000\000\000\
\000\000\067\000\066\000\067\000\000\000\066\000\000\000\066\000\
\066\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\066\000\066\000\066\000\000\000\066\000\066\000\
\066\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\000\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\066\000\000\000\066\000\000\000\
\000\000\066\000\000\000\000\000\066\000\066\000\066\000\069\000\
\066\000\000\000\000\000\000\000\000\000\066\000\069\000\066\000\
\000\000\069\000\000\000\069\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\069\000\069\000\
\069\000\000\000\069\000\069\000\069\000\069\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\000\000\069\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\000\000\000\069\000\000\000\000\000\069\000\000\000\000\000\
\069\000\069\000\069\000\070\000\069\000\000\000\000\000\000\000\
\000\000\069\000\070\000\069\000\000\000\070\000\000\000\070\000\
\070\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\070\000\070\000\070\000\070\000\000\000\070\000\070\000\
\070\000\070\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\070\000\000\000\070\000\000\000\000\000\
\000\000\000\000\000\000\000\000\070\000\000\000\070\000\000\000\
\000\000\070\000\000\000\000\000\070\000\070\000\070\000\071\000\
\070\000\000\000\000\000\000\000\000\000\070\000\071\000\070\000\
\000\000\071\000\000\000\071\000\071\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\071\000\071\000\071\000\
\071\000\000\000\071\000\071\000\071\000\071\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\071\000\
\000\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\000\000\071\000\000\000\000\000\071\000\000\000\000\000\
\071\000\071\000\071\000\068\000\071\000\000\000\000\000\000\000\
\000\000\071\000\068\000\071\000\000\000\068\000\000\000\068\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\068\000\068\000\068\000\000\000\068\000\068\000\
\068\000\068\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\068\000\000\000\068\000\000\000\000\000\
\000\000\000\000\000\000\000\000\068\000\000\000\068\000\000\000\
\000\000\068\000\000\000\000\000\068\000\068\000\068\000\062\000\
\068\000\000\000\000\000\000\000\000\000\068\000\062\000\068\000\
\000\000\062\000\000\000\062\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\062\000\062\000\062\000\
\062\000\000\000\062\000\062\000\062\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\000\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\000\000\062\000\000\000\000\000\062\000\000\000\000\000\
\062\000\062\000\062\000\063\000\062\000\000\000\000\000\000\000\
\000\000\062\000\063\000\062\000\000\000\063\000\000\000\063\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\063\000\063\000\063\000\000\000\063\000\063\000\
\063\000\063\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\000\000\063\000\000\000\
\000\000\063\000\080\000\000\000\063\000\063\000\063\000\080\000\
\063\000\000\000\000\000\080\000\080\000\063\000\080\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\080\000\080\000\000\000\080\000\080\000\080\000\
\080\000\000\000\000\000\000\000\092\000\000\000\000\000\000\000\
\000\000\096\000\080\000\000\000\080\000\000\000\000\000\080\000\
\000\000\097\000\098\000\000\000\000\000\080\000\000\000\000\000\
\080\000\099\000\000\000\080\000\048\000\100\000\101\000\080\000\
\000\000\048\000\048\000\000\000\000\000\000\000\080\000\000\000\
\102\000\056\000\000\000\048\000\048\000\000\000\056\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\000\056\000\000\000\000\000\000\000\000\000\000\000\048\000\
\000\000\103\000\000\000\000\000\104\000\045\000\048\000\105\000\
\000\000\000\000\045\000\045\000\056\000\000\000\000\000\048\000\
\048\000\000\000\048\000\056\000\045\000\045\000\000\000\000\000\
\000\000\048\000\000\000\000\000\056\000\056\000\000\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\000\000\
\045\000\000\000\000\000\080\000\000\000\000\000\000\000\045\000\
\080\000\000\000\000\000\011\000\080\000\080\000\000\000\000\000\
\045\000\045\000\000\000\045\000\000\000\015\000\000\000\000\000\
\000\000\000\000\045\000\080\000\080\000\000\000\080\000\080\000\
\080\000\080\000\000\000\022\000\023\000\000\000\045\000\026\000\
\027\000\028\000\011\000\080\000\000\000\080\000\000\000\000\000\
\080\000\000\000\000\000\081\000\015\000\000\000\080\000\000\000\
\000\000\080\000\000\000\000\000\080\000\080\000\031\000\000\000\
\000\000\032\000\022\000\023\000\033\000\045\000\026\000\027\000\
\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
\032\000\000\000\000\000\033\000"

let yycheck = "\006\000\
\000\000\014\000\081\000\043\000\044\000\042\000\013\000\047\000\
\021\000\022\001\017\000\018\000\019\000\044\001\044\001\055\001\
\059\001\072\001\031\000\032\000\078\001\066\001\029\000\063\001\
\064\000\072\001\066\000\085\001\072\001\004\001\075\001\038\000\
\007\001\008\001\009\001\078\001\011\001\012\001\001\000\002\000\
\078\001\078\001\085\001\083\000\044\001\020\001\021\001\085\001\
\085\001\062\001\044\001\082\001\082\001\028\001\067\000\063\001\
\096\000\032\001\033\001\048\000\049\000\050\000\051\000\078\001\
\104\000\044\001\045\001\024\001\043\001\044\001\059\001\029\001\
\029\001\030\001\026\001\115\000\062\001\084\000\055\001\119\000\
\120\000\024\001\039\001\040\001\008\000\009\000\010\000\011\000\
\093\000\094\000\095\000\063\001\063\001\068\001\055\001\055\001\
\071\001\039\001\063\001\074\001\059\001\075\001\059\001\140\000\
\117\000\118\000\076\001\063\001\121\000\066\001\078\001\044\001\
\125\000\044\001\127\000\128\000\085\001\130\000\075\001\076\001\
\043\001\078\001\077\001\050\001\077\001\114\000\083\001\134\000\
\085\001\077\001\074\001\210\000\066\001\063\001\063\001\175\000\
\176\000\062\001\004\001\055\001\075\001\007\001\008\001\009\001\
\059\001\011\001\012\001\044\001\076\001\063\001\030\001\083\001\
\030\001\062\001\020\001\021\001\062\001\040\001\066\001\172\000\
\173\000\063\001\028\001\026\001\204\000\030\001\032\001\033\001\
\044\001\182\000\066\001\060\001\185\000\186\000\187\000\188\000\
\189\000\043\001\000\000\066\001\075\001\001\001\002\001\075\001\
\075\001\005\001\006\001\078\000\076\001\140\000\010\001\155\000\
\205\000\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\105\000\178\000\068\001\023\001\211\000\071\001\184\000\027\001\
\074\001\128\000\127\000\031\001\255\255\255\255\034\001\035\001\
\036\001\037\001\038\001\255\255\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\255\255\255\255\255\255\051\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\068\001\255\255\255\255\071\001\255\255\255\255\074\001\255\255\
\255\255\255\255\255\255\255\255\255\255\005\001\006\001\255\255\
\255\255\085\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\255\255\023\001\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\031\001\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\255\255\
\255\255\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\255\255\255\255\255\255\051\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\068\001\255\255\255\255\071\001\
\005\001\006\001\074\001\255\255\255\255\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\027\001\255\255\
\255\255\255\255\031\001\255\255\255\255\034\001\035\001\036\001\
\037\001\038\001\255\255\255\255\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\255\255\255\255\255\255\051\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\068\001\
\255\255\255\255\071\001\005\001\006\001\074\001\255\255\255\255\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\255\255\023\001\255\255\255\255\
\255\255\027\001\255\255\255\255\255\255\031\001\255\255\255\255\
\034\001\035\001\036\001\037\001\038\001\255\255\255\255\041\001\
\042\001\255\255\044\001\045\001\046\001\047\001\255\255\255\255\
\255\255\051\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\068\001\255\255\255\255\071\001\005\001\006\001\
\074\001\255\255\255\255\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\255\255\
\023\001\255\255\255\255\255\255\027\001\255\255\255\255\255\255\
\031\001\255\255\255\255\034\001\035\001\036\001\037\001\038\001\
\255\255\255\255\041\001\042\001\255\255\044\001\045\001\046\001\
\047\001\005\001\006\001\255\255\051\001\255\255\010\001\255\255\
\255\255\255\255\255\255\255\255\255\255\017\001\255\255\019\001\
\255\255\255\255\255\255\255\255\255\255\068\001\255\255\027\001\
\071\001\255\255\255\255\074\001\255\255\255\255\034\001\035\001\
\036\001\255\255\255\255\255\255\255\255\041\001\042\001\255\255\
\044\001\045\001\046\001\047\001\255\255\255\255\255\255\051\001\
\255\255\017\001\255\255\255\255\255\255\255\255\022\001\255\255\
\024\001\255\255\026\001\027\001\255\255\029\001\030\001\255\255\
\068\001\255\255\255\255\071\001\255\255\255\255\074\001\039\001\
\040\001\041\001\042\001\255\255\044\001\045\001\046\001\047\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\057\001\255\255\059\001\255\255\255\255\062\001\063\001\
\255\255\255\255\066\001\255\255\068\001\255\255\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\017\001\
\255\255\255\255\255\255\083\001\022\001\085\001\024\001\255\255\
\255\255\027\001\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\255\255\044\001\045\001\046\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\255\255\059\001\255\255\255\255\062\001\255\255\255\255\255\255\
\066\001\255\255\068\001\255\255\255\255\071\001\255\255\255\255\
\074\001\075\001\076\001\017\001\078\001\255\255\255\255\255\255\
\255\255\083\001\024\001\085\001\255\255\027\001\255\255\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\255\255\044\001\045\001\
\046\001\047\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\255\255\059\001\255\255\255\255\
\255\255\255\255\255\255\255\255\066\001\255\255\068\001\255\255\
\255\255\071\001\255\255\255\255\074\001\075\001\076\001\017\001\
\078\001\255\255\255\255\255\255\255\255\083\001\024\001\085\001\
\255\255\027\001\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\255\255\044\001\045\001\046\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\255\255\059\001\255\255\255\255\255\255\255\255\255\255\255\255\
\066\001\255\255\068\001\255\255\255\255\071\001\255\255\255\255\
\074\001\075\001\076\001\017\001\078\001\255\255\255\255\255\255\
\255\255\083\001\024\001\085\001\255\255\027\001\255\255\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\255\255\044\001\045\001\
\046\001\047\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\255\255\059\001\255\255\255\255\
\255\255\255\255\255\255\255\255\066\001\255\255\068\001\255\255\
\255\255\071\001\255\255\255\255\074\001\075\001\076\001\017\001\
\078\001\255\255\255\255\255\255\255\255\083\001\024\001\085\001\
\255\255\027\001\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\255\255\044\001\045\001\046\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\255\255\059\001\255\255\255\255\255\255\255\255\255\255\255\255\
\066\001\255\255\068\001\255\255\255\255\071\001\255\255\255\255\
\074\001\075\001\076\001\017\001\078\001\255\255\255\255\255\255\
\255\255\083\001\024\001\085\001\255\255\027\001\255\255\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\255\255\044\001\045\001\
\046\001\047\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\255\255\059\001\255\255\255\255\
\255\255\255\255\255\255\255\255\066\001\255\255\068\001\255\255\
\255\255\071\001\255\255\255\255\074\001\075\001\076\001\017\001\
\078\001\255\255\255\255\255\255\255\255\083\001\024\001\085\001\
\255\255\027\001\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\255\255\044\001\045\001\046\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\255\255\059\001\255\255\255\255\255\255\255\255\255\255\255\255\
\066\001\255\255\068\001\255\255\255\255\071\001\255\255\255\255\
\074\001\075\001\076\001\017\001\078\001\255\255\255\255\255\255\
\255\255\083\001\024\001\085\001\255\255\027\001\255\255\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\255\255\044\001\045\001\
\046\001\047\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\255\255\059\001\255\255\255\255\
\255\255\255\255\255\255\255\255\066\001\255\255\068\001\255\255\
\255\255\071\001\255\255\255\255\074\001\075\001\076\001\017\001\
\078\001\255\255\255\255\255\255\255\255\083\001\024\001\085\001\
\255\255\027\001\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\255\255\044\001\045\001\046\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\255\255\059\001\255\255\255\255\255\255\255\255\255\255\255\255\
\066\001\255\255\068\001\255\255\255\255\071\001\255\255\255\255\
\074\001\075\001\076\001\017\001\078\001\255\255\255\255\255\255\
\255\255\083\001\024\001\085\001\255\255\027\001\255\255\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\255\255\044\001\045\001\
\046\001\047\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\255\255\059\001\255\255\255\255\
\255\255\255\255\255\255\255\255\066\001\255\255\068\001\255\255\
\255\255\071\001\017\001\255\255\074\001\075\001\076\001\022\001\
\078\001\255\255\255\255\026\001\027\001\083\001\029\001\085\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\041\001\042\001\255\255\044\001\045\001\046\001\
\047\001\255\255\255\255\255\255\007\001\255\255\255\255\255\255\
\255\255\012\001\057\001\255\255\059\001\255\255\255\255\062\001\
\255\255\020\001\021\001\255\255\255\255\068\001\255\255\255\255\
\071\001\028\001\255\255\074\001\024\001\032\001\033\001\078\001\
\255\255\029\001\030\001\255\255\255\255\255\255\085\001\255\255\
\043\001\024\001\255\255\039\001\040\001\255\255\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\040\001\255\255\255\255\255\255\255\255\255\255\059\001\
\255\255\068\001\255\255\255\255\071\001\024\001\066\001\074\001\
\255\255\255\255\029\001\030\001\059\001\255\255\255\255\075\001\
\076\001\255\255\078\001\066\001\039\001\040\001\255\255\255\255\
\255\255\085\001\255\255\255\255\075\001\076\001\255\255\078\001\
\255\255\255\255\255\255\255\255\255\255\255\255\085\001\255\255\
\059\001\255\255\255\255\017\001\255\255\255\255\255\255\066\001\
\022\001\255\255\255\255\017\001\026\001\027\001\255\255\255\255\
\075\001\076\001\255\255\078\001\255\255\027\001\255\255\255\255\
\255\255\255\255\085\001\041\001\042\001\255\255\044\001\045\001\
\046\001\047\001\255\255\041\001\042\001\255\255\044\001\045\001\
\046\001\047\001\017\001\057\001\255\255\059\001\255\255\255\255\
\062\001\255\255\255\255\057\001\027\001\255\255\068\001\255\255\
\255\255\071\001\255\255\255\255\074\001\075\001\068\001\255\255\
\255\255\071\001\041\001\042\001\074\001\044\001\045\001\046\001\
\047\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\068\001\255\255\255\255\
\071\001\255\255\255\255\074\001"

let yynames_const = "\
  "

let yynames_block = "\
  LOAD\000\
  SHOWCONTEXT\000\
  TYPE\000\
  REC\000\
  FOLD\000\
  UNFOLD\000\
  TOP\000\
  SOURCE\000\
  SINK\000\
  REF\000\
  REFTYPE\000\
  LIST\000\
  TAIL\000\
  HEAD\000\
  ISNIL\000\
  CONS\000\
  NIL\000\
  LETREC\000\
  FIX\000\
  STRING\000\
  FLOAT\000\
  TIMESFLOAT\000\
  CASE\000\
  OF\000\
  TAG\000\
  AS\000\
  UNIT\000\
  UNITTYPE\000\
  WHERE\000\
  IN\000\
  LET\000\
  BOOL\000\
  NAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LAMBDA\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  NEWLINE\000\
  DOUBLESEMI\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
                                        ( fun _ _   ->  [],emptyctx,emptystore                      )
# 789 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 134 "parser.mly"
                                        ( let file   = _2.v in 
                                          fun ctx s ->  [],ctx,s                                    )
# 798 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 136 "parser.mly"
                                        ( let _,ctx',s' = _1 [] emptystore in pr_ctx ctx';
                                          fun _ _  ->  [],ctx',s'                                   )
# 808 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 138 "parser.mly"
                                        ( fun ctx s ->  [],ctx,s                                    )
# 816 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'oneREPL) in
    Obj.repr(
# 139 "parser.mly"
                                        ( let _,ev_ctx,s    = _1 [] emptystore in   
                                          let cmds,_      = _2 ev_ctx in 
                                          let ev_ctx',s'   = process_commands ev_ctx s cmds in 
                                          fun _ _  -> [],ev_ctx',s'                                 )
# 827 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 144 "parser.mly"
                                        ( fun ctx ->  let cmd,ctx'    = _1 ctx in [cmd],ctx'        )
# 835 "parser.ml"
               : 'oneREPL))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'oneREPL) in
    Obj.repr(
# 145 "parser.mly"
                                        ( fun ctx ->  let cmd,ctx'    = _1 ctx in 
                                                      let cmds,ctx''  = _3 ctx' in cmd::cmds,ctx''  )
# 845 "parser.ml"
               : 'oneREPL))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 152 "parser.mly"
                                        ( fun ctx   ->  [],ctx                                      )
# 852 "parser.ml"
               : Syntax.context -> (Syntax.command list * Syntax.context)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.context -> (Syntax.command list * Syntax.context)) in
    Obj.repr(
# 153 "parser.mly"
                                        ( fun ctx   ->  let cmd,ctx  = _1 ctx in 
                                                        let cmds,ctx = _3 ctx in cmd::cmds,ctx      )
# 862 "parser.ml"
               : Syntax.context -> (Syntax.command list * Syntax.context)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TermWrap) in
    Obj.repr(
# 159 "parser.mly"
                                        ( fun ctx   ->  let t = _1 ctx in Eval(tmInfo t,t),ctx      )
# 869 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 160 "parser.mly"
                                        ( fun ctx   ->  Bind(_1.i,_1.v,_2 ctx),addname ctx _1.v     )
# 877 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 161 "parser.mly"
                                        ( fun ctx   ->  Bind(_1.i,_1.v,_2 ctx),addname ctx _1.v     )
# 885 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "parser.mly"
                                        ( fun ctx   ->  BindTyVar                                   )
# 891 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 164 "parser.mly"
                                        ( fun ctx   ->  BindTyAbb(_2 ctx)                           )
# 899 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 166 "parser.mly"
                                        ( fun ctx   ->  BindTmVar(_2 ctx)                           )
# 907 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 167 "parser.mly"
                                        ( fun ctx   ->  BindTmAbb(_2 ctx,None)                      )
# 915 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 172 "parser.mly"
                                        ( _1                                                        )
# 922 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 173 "parser.mly"
                                        ( fun ctx   ->  TyRec(_2.v, _4(addname ctx _2.v))           )
# 932 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 174 "parser.mly"
                                        ( fun ctx   ->  TyRef(_2 ctx)                               )
# 940 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 175 "parser.mly"
                                        ( fun ctx   ->  TySource(_2 ctx)                            )
# 948 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 176 "parser.mly"
                                        ( fun ctx   ->  TySink(_2 ctx)                              )
# 956 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 178 "parser.mly"
                                        ( fun ctx   ->  TyArr(_1 ctx, _3 ctx)                       )
# 965 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 179 "parser.mly"
                                        ( _1                                                        )
# 972 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 181 "parser.mly"
                                        ( _2                                                        )
# 981 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 182 "parser.mly"
                                        ( fun ctx   ->  if isnamebound ctx _1.v 
                                            then    TyVar(name2index _1.i ctx _1.v, ctxlen ctx) 
                                            else    TyId(_1.v)                                      )
# 990 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 185 "parser.mly"
                                        ( fun ctx   ->  TyTop                                       )
# 997 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 186 "parser.mly"
                                        ( fun ctx   ->  TyFloat                                     )
# 1004 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 187 "parser.mly"
                                        ( fun ctx   ->  TyString                                    )
# 1011 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 188 "parser.mly"
                                        ( fun ctx   ->  TyBool                                      )
# 1018 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 189 "parser.mly"
                                        ( fun ctx   ->  TyNat                                       )
# 1025 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 190 "parser.mly"
                                        ( fun ctx   ->  TyUnit                                      )
# 1032 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TyFields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 191 "parser.mly"
                                        ( fun ctx   ->  TyRecord(_2 ctx 1)                          )
# 1041 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TyFields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 192 "parser.mly"
                                        ( fun ctx   ->  TyVariant(_2 ctx 1)                         )
# 1050 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 193 "parser.mly"
                                        ( fun ctx   ->  TyList(_2 ctx)                              )
# 1058 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 195 "parser.mly"
                                        ( fun ctx   ->  TyList(_2 ctx)                              )
# 1067 "parser.ml"
               : 'LType))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "parser.mly"
                                        ( fun ctx   ->  fun i -> []                                 )
# 1073 "parser.ml"
               : 'TyFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NETyFields) in
    Obj.repr(
# 198 "parser.mly"
                                        ( _1                                                        )
# 1080 "parser.ml"
               : 'TyFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TyField) in
    Obj.repr(
# 200 "parser.mly"
                                        ( fun ctx   ->  fun i -> [_1 ctx i]                         )
# 1087 "parser.ml"
               : 'NETyFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'TyField) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NETyFields) in
    Obj.repr(
# 201 "parser.mly"
                                        ( fun ctx   ->  fun i -> (_1 ctx i)::(_3 ctx (i+1))         )
# 1096 "parser.ml"
               : 'NETyFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 203 "parser.mly"
                                        ( fun ctx   ->  fun i -> (_1.v, _3 ctx)                     )
# 1105 "parser.ml"
               : 'TyField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 204 "parser.mly"
                                        ( fun ctx   ->  fun i -> (string_of_int i, _1 ctx)          )
# 1112 "parser.ml"
               : 'TyField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'TermWrap) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 207 "parser.mly"
                                        ( fun ctx   ->  TmLet(_2,_3.v,_5 ctx,_1(addname ctx _3.v))  )
# 1123 "parser.ml"
               : 'TermWrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 208 "parser.mly"
                                        ( fun ctx   ->  TmLet(_2,_3.v,_5 ctx,_1(addname ctx _3.v))  )
# 1134 "parser.ml"
               : 'TermWrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 209 "parser.mly"
                                        ( _1                                                        )
# 1141 "parser.ml"
               : 'TermWrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 211 "parser.mly"
                                        ( fun ctx   ->  [_1 ctx]                                    )
# 1148 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 212 "parser.mly"
                                        ( fun ctx   ->  (_1 ctx)::(_3 ctx)                          )
# 1157 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string  Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 214 "parser.mly"
                                        ( fun ctx   ->  (_2.v,(_4.v,_7(addname ctx _4.v)))          )
# 1170 "parser.ml"
               : 'Case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 216 "parser.mly"
                                        ( _1                                                        )
# 1177 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 217 "parser.mly"
                                        ( fun ctx   ->  TmAbs(_1,_2.v,_4 ctx,_6 (addname ctx _2.v)) )
# 1189 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 218 "parser.mly"
                                        ( fun ctx   ->  TmAbs(_1,"_", _4 ctx,_6 (addname ctx "_" )) )
# 1201 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 219 "parser.mly"
                                        ( fun ctx   ->  TmIf(_1,_2 ctx,_4 ctx,_6 ctx)               )
# 1213 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 220 "parser.mly"
                                        ( fun ctx   ->  TmLet(_1,_2.v,_4 ctx,_6 (addname ctx _2.v)) )
# 1225 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 221 "parser.mly"
                                        ( fun ctx   ->  TmLet(_1,"_", _4 ctx,_6 (addname ctx "_" )) )
# 1237 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 223 "parser.mly"
                                        ( fun ctx   ->  let ctx' = addname ctx _2.v in 
                                                        TmLet(_1,_2.v,TmFix(_1,TmAbs(_1,_2.v,_4 ctx,_6 ctx')),_8 ctx'))
# 1252 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 225 "parser.mly"
                                        ( fun ctx   ->  TmCase(_1,_2 ctx,_4 ctx)                    )
# 1262 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 226 "parser.mly"
                                        ( fun ctx   ->  TmAssign(_2,_1 ctx,_3 ctx)                  )
# 1271 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LType) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ATerm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 227 "parser.mly"
                                        ( fun ctx   ->  TmCons(_1,_2 ctx,_3 ctx,_4 ctx)             )
# 1281 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'LType) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 228 "parser.mly"
                                        ( fun ctx   ->  TmHead(_1,_2 ctx,_3 ctx)                    )
# 1290 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'LType) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 229 "parser.mly"
                                        ( fun ctx   ->  TmTail(_1,_2 ctx,_3 ctx)                    )
# 1299 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'LType) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 230 "parser.mly"
                                        ( fun ctx   ->  TmIsNil(_1,_2 ctx,_3 ctx)                   )
# 1308 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 232 "parser.mly"
                                        ( _1                                                        )
# 1315 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 233 "parser.mly"
                                        ( fun ctx   ->  let t=_1 ctx in TmApp(tmInfo t,t,_2 ctx)    )
# 1323 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 234 "parser.mly"
                                        ( fun ctx   ->  TmTimesfloat(_2,_1 ctx,_3 ctx)              )
# 1332 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 235 "parser.mly"
                                        ( fun ctx   ->  TmFold(_1,   _3 ctx)                        )
# 1342 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 236 "parser.mly"
                                        ( fun ctx   ->  TmUnfold(_1, _3 ctx)                        )
# 1352 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 237 "parser.mly"
                                        ( fun ctx   ->  TmFix(_1, _2 ctx )                          )
# 1360 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 238 "parser.mly"
                                        ( fun ctx   ->  TmRef(_1, _2 ctx )                          )
# 1368 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 239 "parser.mly"
                                        ( fun ctx   ->  TmDeref(_1, _2 ctx )                        )
# 1376 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 240 "parser.mly"
                                        ( fun ctx   ->  TmSucc(_1, _2 ctx )                         )
# 1384 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 241 "parser.mly"
                                        ( fun ctx   ->  TmPred(_1, _2 ctx )                         )
# 1392 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 242 "parser.mly"
                                        ( fun ctx   ->  TmIsZero(_1, _2 ctx)                        )
# 1400 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 244 "parser.mly"
                                        ( fun ctx   ->  TmProj(_2, _1 ctx, _3.v)                    )
# 1409 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int     Support.Error.withinfo) in
    Obj.repr(
# 245 "parser.mly"
                                        ( fun ctx   ->  TmProj(_2, _1 ctx, soi _3.v)                )
# 1418 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 246 "parser.mly"
                                        ( _1                                                        )
# 1425 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 248 "parser.mly"
                                        ( fun ctx   ->  TmAscribe(_2,_1 ctx,_3 ctx)                 )
# 1434 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 249 "parser.mly"
                                        ( _1                                                        )
# 1441 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 251 "parser.mly"
                                        ( _2                                                        )
# 1450 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 252 "parser.mly"
                                        ( fun ctx   ->  TmRecord(_1,_2 ctx 1)                       )
# 1459 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 253 "parser.mly"
                                        ( fun ctx   ->  TmTag(_1,_2.v,_4 ctx,_7 ctx)                )
# 1472 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 254 "parser.mly"
                                        ( fun ctx   ->  TmVar(_1.i,name2index _1.i ctx _1.v,ctxlen ctx) )
# 1479 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 255 "parser.mly"
                                        ( fun ctx   ->  TmString(_1.i,_1.v)                         )
# 1486 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float   Support.Error.withinfo) in
    Obj.repr(
# 256 "parser.mly"
                                        ( fun ctx   ->  TmFloat(_1.i,_1.v)                          )
# 1493 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 257 "parser.mly"
                                        ( fun ctx   ->  TmUnit(_1)                                  )
# 1500 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 258 "parser.mly"
                                        ( fun ctx   ->  TmTrue(_1)                                  )
# 1507 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 259 "parser.mly"
                                        ( fun ctx   ->  TmFalse(_1)                                 )
# 1514 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int     Support.Error.withinfo) in
    Obj.repr(
# 260 "parser.mly"
                                        ( fun ctx   ->  let rec f = function
                                                            | 0 -> TmZero(_1.i)
                                                            | n -> TmSucc(_1.i,f(n-1))in f _1.v     )
# 1523 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'LType) in
    Obj.repr(
# 263 "parser.mly"
                                        ( fun ctx   ->  TmNil(_1,_2 ctx)                            )
# 1531 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 265 "parser.mly"
                                        ( _1                                                        )
# 1538 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 266 "parser.mly"
                                        ( fun ctx   ->  TmApp(_2,TmAbs(_2,"_",TyUnit,_3(addname ctx"_")),_1 ctx) )
# 1547 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    Obj.repr(
# 269 "parser.mly"
                                        ( fun ctx   ->  fun i -> []                                 )
# 1553 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 270 "parser.mly"
                                        ( _1                                                        )
# 1560 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 272 "parser.mly"
                                        ( fun ctx   -> fun i -> [ _1 ctx i ]                        )
# 1567 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 273 "parser.mly"
                                        ( fun ctx   -> fun i -> (_1 ctx i)::(_3 ctx(i+1))           )
# 1576 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 275 "parser.mly"
                                        ( fun ctx   -> fun i -> (_1.v, _3 ctx)                      )
# 1585 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 276 "parser.mly"
                                        ( fun ctx   -> fun i -> (string_of_int i, _1 ctx)           )
# 1592 "parser.ml"
               : 'Field))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry input *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.context -> (Syntax.command list * Syntax.context))
let input (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store))
