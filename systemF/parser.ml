type token =
  | LOAD of (string  Support.Error.withinfo)
  | SHOWCONTEXT of (Support.Error.info)
  | ALL of (Support.Error.info)
  | SOME of (Support.Error.info)
  | TOP of (Support.Error.info)
  | REF of (Support.Error.info)
  | REFTYPE of (Support.Error.info)
  | LIST of (Support.Error.info)
  | TAIL of (Support.Error.info)
  | HEAD of (Support.Error.info)
  | ISNIL of (Support.Error.info)
  | CONS of (Support.Error.info)
  | NIL of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | FIX of (Support.Error.info)
  | STRING of (Support.Error.info)
  | FLOAT of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | TAG of (Support.Error.info)
  | AS of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | UNITTYPE of (Support.Error.info)
  | WHERE of (Support.Error.info)
  | IN of (Support.Error.info)
  | LET of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | NAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | LAM of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | UCID of (string  Support.Error.withinfo)
  | LCID of (string  Support.Error.withinfo)
  | INTV of (int     Support.Error.withinfo)
  | FLOATV of (float   Support.Error.withinfo)
  | STRINGV of (string  Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCUR of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCUR of (Support.Error.info)
  | LCURBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCUR of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)
  | NEWLINE of (Support.Error.info)
  | DSEMI of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Format
open Support.Error
open Support.Pervasive
open Syntax
open Print 
open Type
open Eval
open Interpreter 

let pe = print_endline 
# 99 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* LOAD *);
  258 (* SHOWCONTEXT *);
  259 (* ALL *);
  260 (* SOME *);
  261 (* TOP *);
  262 (* REF *);
  263 (* REFTYPE *);
  264 (* LIST *);
  265 (* TAIL *);
  266 (* HEAD *);
  267 (* ISNIL *);
  268 (* CONS *);
  269 (* NIL *);
  270 (* LETREC *);
  271 (* FIX *);
  272 (* STRING *);
  273 (* FLOAT *);
  274 (* TIMESFLOAT *);
  275 (* CASE *);
  276 (* OF *);
  277 (* TAG *);
  278 (* AS *);
  279 (* UNIT *);
  280 (* UNITTYPE *);
  281 (* WHERE *);
  282 (* IN *);
  283 (* LET *);
  284 (* BOOL *);
  285 (* NAT *);
  286 (* SUCC *);
  287 (* PRED *);
  288 (* ISZERO *);
  289 (* LAM *);
  290 (* IF *);
  291 (* THEN *);
  292 (* ELSE *);
  293 (* TRUE *);
  294 (* FALSE *);
  295 (* UCID *);
  296 (* LCID *);
  297 (* INTV *);
  298 (* FLOATV *);
  299 (* STRINGV *);
  300 (* APOSTROPHE *);
  301 (* DQUOTE *);
  302 (* ARROW *);
  303 (* BANG *);
  304 (* BARGT *);
  305 (* BARRCUR *);
  306 (* BARRSQUARE *);
  307 (* COLON *);
  308 (* COLONCOLON *);
  309 (* COLONEQ *);
  310 (* COLONHASH *);
  311 (* COMMA *);
  312 (* DARROW *);
  313 (* DDARROW *);
  314 (* DOT *);
    0 (* EOF *);
  315 (* EQ *);
  316 (* EQEQ *);
  317 (* EXISTS *);
  318 (* GT *);
  319 (* HASH *);
  320 (* LCUR *);
  321 (* LCURBAR *);
  322 (* LEFTARROW *);
  323 (* LPAREN *);
  324 (* LSQUARE *);
  325 (* LSQUAREBAR *);
  326 (* LT *);
  327 (* RCUR *);
  328 (* RPAREN *);
  329 (* RSQUARE *);
  330 (* SEMI *);
  331 (* SLASH *);
  332 (* STAR *);
  333 (* TRIANGLE *);
  334 (* USCORE *);
  335 (* VBAR *);
  336 (* NEWLINE *);
  337 (* DSEMI *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\003\000\003\000\001\000\001\000\
\004\000\004\000\004\000\006\000\006\000\007\000\007\000\008\000\
\008\000\008\000\010\000\010\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\012\000\012\000\013\000\
\013\000\014\000\014\000\005\000\005\000\005\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\016\000\016\000\
\016\000\017\000\017\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\019\000\019\000\020\000\
\020\000\021\000\021\000\022\000\022\000\000\000\000\000"

let yylen = "\002\000\
\000\000\003\000\002\000\002\000\002\000\003\000\001\000\003\000\
\001\000\002\000\002\000\000\000\002\000\002\000\002\000\001\000\
\004\000\004\000\003\000\001\000\001\000\003\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\000\000\001\000\001\000\
\003\000\003\000\001\000\005\000\005\000\001\000\001\000\006\000\
\006\000\006\000\004\000\010\000\006\000\008\000\001\000\003\000\
\002\000\002\000\002\000\002\000\002\000\004\000\003\000\003\000\
\001\000\003\000\001\000\003\000\008\000\003\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\000\000\
\001\000\001\000\003\000\003\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\001\000\000\000\000\000\000\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\068\000\000\000\000\000\
\069\000\065\000\064\000\007\000\000\000\000\000\078\000\000\000\
\000\000\000\000\000\000\000\000\057\000\000\000\000\000\000\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\011\000\
\000\000\000\000\077\000\000\000\073\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\004\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\025\000\024\000\
\028\000\026\000\027\000\021\000\000\000\000\000\013\000\016\000\
\000\000\014\000\015\000\000\000\000\000\062\000\000\000\000\000\
\060\000\008\000\000\000\000\000\000\000\000\000\055\000\056\000\
\058\000\002\000\000\000\005\000\000\000\000\000\000\000\000\000\
\043\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
\031\000\000\000\000\000\000\000\076\000\000\000\075\000\071\000\
\000\000\000\000\054\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\000\000\022\000\
\019\000\000\000\036\000\037\000\000\000\040\000\000\000\041\000\
\042\000\045\000\017\000\018\000\034\000\033\000\000\000\000\000\
\000\000\000\000\046\000\000\000\061\000\000\000\044\000"

let yydgoto = "\003\000\
\023\000\031\000\067\000\024\000\025\000\045\000\048\000\119\000\
\026\000\088\000\089\000\120\000\121\000\122\000\027\000\028\000\
\029\000\030\000\056\000\052\000\053\000\054\000"

let yysindex = "\005\000\
\001\000\000\000\000\000\236\254\203\255\000\000\231\254\203\255\
\203\255\203\255\029\255\044\002\000\000\000\000\225\254\216\254\
\000\000\000\000\000\000\000\000\135\000\044\002\000\000\218\254\
\235\254\016\255\215\255\243\254\000\000\024\255\128\255\000\255\
\000\000\004\255\005\255\033\255\015\255\004\255\004\255\004\255\
\017\255\027\255\046\255\026\255\000\000\026\255\044\002\000\000\
\023\255\026\255\000\000\014\255\000\000\032\255\018\255\019\255\
\001\000\054\255\055\255\026\255\004\255\203\255\030\255\026\255\
\025\255\000\000\000\000\198\254\026\255\044\002\049\255\044\002\
\044\002\026\255\044\002\068\255\069\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\255\026\255\000\000\000\000\
\063\255\000\000\000\000\044\002\058\255\000\000\082\002\044\002\
\000\000\000\000\051\255\056\255\043\255\004\255\000\000\000\000\
\000\000\000\000\006\002\000\000\060\255\097\255\087\255\103\255\
\000\000\076\255\099\255\079\255\080\255\089\255\000\000\070\255\
\000\000\090\255\074\255\072\255\000\000\044\002\000\000\000\000\
\044\002\044\002\000\000\000\000\044\002\044\002\073\255\044\002\
\044\002\044\002\026\255\026\255\026\255\000\000\009\255\000\000\
\000\000\081\255\000\000\000\000\121\255\000\000\094\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\134\255\044\002\
\044\002\026\255\000\000\131\255\000\000\044\002\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\199\254\089\000\
\000\000\000\000\000\000\000\000\092\255\000\000\000\000\000\000\
\234\254\222\254\031\255\172\000\000\000\034\000\164\000\000\000\
\000\000\222\000\000\000\000\000\000\000\016\001\066\001\116\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\110\002\000\000\000\000\000\000\000\000\101\255\102\255\000\000\
\000\000\000\000\000\000\000\000\166\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\104\255\000\000\000\000\000\000\
\161\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\216\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\105\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\116\000\000\000\070\000\228\255\000\000\000\000\000\000\214\255\
\244\255\054\000\000\000\000\000\037\000\000\000\000\000\123\000\
\000\000\000\000\085\000\000\000\087\000\000\000"

let yytablesize = 949
let yytable = "\043\000\
\020\000\087\000\068\000\090\000\062\000\001\000\002\000\093\000\
\051\000\055\000\046\000\076\000\077\000\078\000\035\000\107\000\
\012\000\101\000\047\000\032\000\038\000\105\000\108\000\012\000\
\079\000\080\000\109\000\044\000\076\000\077\000\078\000\114\000\
\081\000\058\000\091\000\057\000\082\000\083\000\036\000\038\000\
\059\000\079\000\080\000\123\000\063\000\064\000\038\000\084\000\
\118\000\081\000\069\000\009\000\037\000\082\000\083\000\039\000\
\039\000\110\000\009\000\112\000\113\000\063\000\115\000\070\000\
\084\000\039\000\039\000\041\000\042\000\103\000\104\000\071\000\
\085\000\072\000\073\000\086\000\078\000\074\000\068\000\125\000\
\075\000\092\000\051\000\055\000\094\000\039\000\095\000\079\000\
\080\000\085\000\097\000\096\000\086\000\099\000\100\000\081\000\
\155\000\156\000\157\000\082\000\083\000\039\000\039\000\111\000\
\039\000\106\000\116\000\117\000\124\000\129\000\084\000\039\000\
\126\000\146\000\130\000\131\000\147\000\148\000\133\000\165\000\
\149\000\150\000\134\000\152\000\153\000\154\000\135\000\034\000\
\136\000\065\000\038\000\039\000\040\000\137\000\138\000\085\000\
\139\000\140\000\086\000\141\000\142\000\004\000\005\000\151\000\
\143\000\144\000\160\000\163\000\164\000\061\000\006\000\159\000\
\161\000\167\000\007\000\162\000\166\000\008\000\009\000\010\000\
\011\000\012\000\072\000\079\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\074\000\098\000\070\000\030\000\032\000\
\132\000\145\000\020\000\158\000\128\000\127\000\020\000\020\000\
\102\000\020\000\020\000\000\000\000\000\000\000\000\000\021\000\
\000\000\000\000\022\000\020\000\020\000\020\000\020\000\000\000\
\020\000\020\000\020\000\020\000\000\000\000\000\000\000\000\000\
\066\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\000\000\000\000\020\000\020\000\000\000\000\000\000\000\000\000\
\020\000\006\000\000\000\020\000\020\000\000\000\000\000\020\000\
\020\000\020\000\020\000\000\000\000\000\006\000\000\000\013\000\
\014\000\020\000\033\000\017\000\018\000\019\000\000\000\000\000\
\000\000\000\000\000\000\013\000\014\000\000\000\033\000\017\000\
\018\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\000\000\000\000\022\000\004\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\006\000\
\000\000\022\000\060\000\007\000\000\000\000\000\008\000\009\000\
\010\000\011\000\012\000\000\000\000\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\000\000\000\000\000\000\000\000\
\059\000\000\000\059\000\059\000\000\000\000\000\000\000\000\000\
\021\000\000\000\000\000\022\000\059\000\059\000\059\000\059\000\
\000\000\059\000\059\000\059\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\059\000\000\000\000\000\059\000\000\000\000\000\000\000\000\000\
\000\000\059\000\000\000\000\000\059\000\059\000\000\000\000\000\
\059\000\059\000\063\000\059\000\000\000\000\000\063\000\063\000\
\000\000\063\000\059\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\000\063\000\000\000\
\063\000\063\000\063\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000\
\000\000\000\000\063\000\000\000\004\000\005\000\000\000\000\000\
\063\000\000\000\000\000\063\000\063\000\006\000\000\000\000\000\
\000\000\007\000\063\000\000\000\008\000\009\000\010\000\011\000\
\012\000\063\000\000\000\013\000\014\000\000\000\049\000\017\000\
\018\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\000\000\047\000\047\000\021\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\047\000\047\000\
\047\000\047\000\050\000\047\000\047\000\047\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\000\000\000\000\047\000\047\000\
\000\000\000\000\047\000\047\000\049\000\047\000\049\000\049\000\
\000\000\000\000\000\000\000\000\047\000\000\000\000\000\000\000\
\049\000\049\000\049\000\049\000\000\000\049\000\049\000\049\000\
\049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\000\000\000\000\
\049\000\049\000\000\000\000\000\049\000\049\000\050\000\049\000\
\050\000\050\000\000\000\000\000\000\000\000\000\049\000\000\000\
\000\000\000\000\050\000\050\000\050\000\050\000\000\000\050\000\
\050\000\050\000\050\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\000\000\000\000\050\000\050\000\000\000\000\000\050\000\050\000\
\051\000\050\000\051\000\051\000\000\000\000\000\000\000\000\000\
\050\000\000\000\000\000\000\000\051\000\051\000\051\000\051\000\
\000\000\051\000\051\000\051\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\051\000\000\000\000\000\051\000\051\000\000\000\000\000\
\051\000\051\000\052\000\051\000\052\000\052\000\000\000\000\000\
\000\000\000\000\051\000\000\000\000\000\000\000\052\000\052\000\
\052\000\052\000\000\000\052\000\052\000\052\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\052\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\000\000\052\000\052\000\
\000\000\000\000\052\000\052\000\053\000\052\000\053\000\053\000\
\000\000\000\000\000\000\000\000\052\000\000\000\000\000\000\000\
\053\000\053\000\053\000\053\000\000\000\053\000\053\000\053\000\
\053\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\000\000\000\000\
\053\000\053\000\000\000\000\000\053\000\053\000\048\000\053\000\
\048\000\048\000\000\000\000\000\000\000\000\000\053\000\000\000\
\000\000\000\000\048\000\048\000\048\000\048\000\000\000\048\000\
\048\000\048\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\
\000\000\000\000\000\000\004\000\005\000\000\000\000\000\048\000\
\000\000\000\000\048\000\048\000\006\000\000\000\048\000\048\000\
\007\000\048\000\000\000\008\000\009\000\010\000\011\000\012\000\
\048\000\000\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\021\000\007\000\000\000\
\022\000\008\000\009\000\010\000\011\000\012\000\000\000\000\000\
\013\000\014\000\000\000\033\000\017\000\018\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\021\000\007\000\000\000\022\000\008\000\
\009\000\010\000\011\000\012\000\000\000\000\000\013\000\014\000\
\000\000\049\000\017\000\018\000\019\000\000\000\000\000\063\000\
\000\000\000\000\000\000\063\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\063\000\063\000\022\000\063\000\063\000\063\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\000\000\000\000\063\000\
\000\000\000\000\000\000\000\000\000\000\063\000\000\000\000\000\
\063\000\063\000\000\000\000\000\063\000"

let yycheck = "\012\000\
\000\000\044\000\031\000\046\000\018\001\001\000\002\000\050\000\
\021\000\022\000\051\001\003\001\004\001\005\001\040\001\074\001\
\074\001\060\000\059\001\040\001\055\001\064\000\081\001\081\001\
\016\001\017\001\069\000\059\001\003\001\004\001\005\001\074\000\
\024\001\055\001\047\000\074\001\028\001\029\001\064\001\074\001\
\025\001\016\001\017\001\086\000\058\001\022\001\081\001\039\001\
\040\001\024\001\051\001\074\001\078\001\028\001\029\001\025\001\
\026\001\070\000\081\001\072\000\073\000\058\001\075\000\059\001\
\039\001\035\001\036\001\039\001\040\001\040\001\041\001\039\001\
\064\001\059\001\058\001\067\001\005\001\051\001\107\000\092\000\
\035\001\059\001\095\000\096\000\071\001\055\001\055\001\016\001\
\017\001\064\001\072\001\074\001\067\001\040\001\040\001\024\001\
\139\000\140\000\141\000\028\001\029\001\071\001\072\001\055\001\
\074\001\081\001\039\001\039\001\046\001\059\001\039\001\081\001\
\055\001\126\000\059\001\073\001\129\000\130\000\059\001\162\000\
\133\000\134\000\026\001\136\000\137\000\138\000\040\001\005\000\
\026\001\002\001\008\000\009\000\010\000\058\001\036\001\064\001\
\058\001\058\001\067\001\051\001\071\001\014\001\015\001\071\001\
\055\001\072\001\026\001\160\000\161\000\027\000\023\001\071\001\
\059\001\166\000\027\001\022\001\026\001\030\001\031\001\032\001\
\033\001\034\001\071\001\000\000\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\071\001\057\000\072\001\071\001\071\001\
\107\000\124\000\018\001\143\000\096\000\095\000\022\001\023\001\
\062\000\025\001\026\001\255\255\255\255\255\255\255\255\064\001\
\255\255\255\255\067\001\035\001\036\001\037\001\038\001\255\255\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\255\255\
\081\001\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\255\255\255\255\058\001\059\001\255\255\255\255\255\255\255\255\
\064\001\023\001\255\255\067\001\068\001\255\255\255\255\071\001\
\072\001\073\001\074\001\255\255\255\255\023\001\255\255\037\001\
\038\001\081\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\255\255\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\064\001\255\255\255\255\067\001\014\001\015\001\
\255\255\255\255\255\255\255\255\255\255\255\255\064\001\023\001\
\255\255\067\001\068\001\027\001\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\018\001\255\255\255\255\255\255\255\255\
\023\001\255\255\025\001\026\001\255\255\255\255\255\255\255\255\
\064\001\255\255\255\255\067\001\035\001\036\001\037\001\038\001\
\255\255\040\001\041\001\042\001\043\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\055\001\255\255\255\255\058\001\255\255\255\255\255\255\255\255\
\255\255\064\001\255\255\255\255\067\001\068\001\255\255\255\255\
\071\001\072\001\018\001\074\001\255\255\255\255\022\001\023\001\
\255\255\025\001\081\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\037\001\038\001\255\255\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\255\255\255\255\058\001\255\255\014\001\015\001\255\255\255\255\
\064\001\255\255\255\255\067\001\068\001\023\001\255\255\255\255\
\255\255\027\001\074\001\255\255\030\001\031\001\032\001\033\001\
\034\001\081\001\255\255\037\001\038\001\255\255\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\255\255\025\001\026\001\064\001\255\255\
\255\255\067\001\255\255\255\255\255\255\255\255\035\001\036\001\
\037\001\038\001\076\001\040\001\041\001\042\001\043\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\055\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\064\001\255\255\255\255\067\001\068\001\
\255\255\255\255\071\001\072\001\023\001\074\001\025\001\026\001\
\255\255\255\255\255\255\255\255\081\001\255\255\255\255\255\255\
\035\001\036\001\037\001\038\001\255\255\040\001\041\001\042\001\
\043\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\064\001\255\255\255\255\
\067\001\068\001\255\255\255\255\071\001\072\001\023\001\074\001\
\025\001\026\001\255\255\255\255\255\255\255\255\081\001\255\255\
\255\255\255\255\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\043\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\055\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\064\001\
\255\255\255\255\067\001\068\001\255\255\255\255\071\001\072\001\
\023\001\074\001\025\001\026\001\255\255\255\255\255\255\255\255\
\081\001\255\255\255\255\255\255\035\001\036\001\037\001\038\001\
\255\255\040\001\041\001\042\001\043\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\055\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\064\001\255\255\255\255\067\001\068\001\255\255\255\255\
\071\001\072\001\023\001\074\001\025\001\026\001\255\255\255\255\
\255\255\255\255\081\001\255\255\255\255\255\255\035\001\036\001\
\037\001\038\001\255\255\040\001\041\001\042\001\043\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\055\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\064\001\255\255\255\255\067\001\068\001\
\255\255\255\255\071\001\072\001\023\001\074\001\025\001\026\001\
\255\255\255\255\255\255\255\255\081\001\255\255\255\255\255\255\
\035\001\036\001\037\001\038\001\255\255\040\001\041\001\042\001\
\043\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\064\001\255\255\255\255\
\067\001\068\001\255\255\255\255\071\001\072\001\023\001\074\001\
\025\001\026\001\255\255\255\255\255\255\255\255\081\001\255\255\
\255\255\255\255\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\043\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\055\001\255\255\
\255\255\255\255\255\255\014\001\015\001\255\255\255\255\064\001\
\255\255\255\255\067\001\068\001\023\001\255\255\071\001\072\001\
\027\001\074\001\255\255\030\001\031\001\032\001\033\001\034\001\
\081\001\255\255\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\014\001\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\255\255\255\255\064\001\027\001\255\255\
\067\001\030\001\031\001\032\001\033\001\034\001\255\255\255\255\
\037\001\038\001\255\255\040\001\041\001\042\001\043\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\014\001\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\255\255\255\255\064\001\027\001\255\255\067\001\030\001\
\031\001\032\001\033\001\034\001\255\255\255\255\037\001\038\001\
\255\255\040\001\041\001\042\001\043\001\255\255\255\255\018\001\
\255\255\255\255\255\255\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\064\001\037\001\038\001\067\001\040\001\041\001\042\001\
\043\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\255\255\255\255\058\001\
\255\255\255\255\255\255\255\255\255\255\064\001\255\255\255\255\
\067\001\068\001\255\255\255\255\071\001"

let yynames_const = "\
  "

let yynames_block = "\
  LOAD\000\
  SHOWCONTEXT\000\
  ALL\000\
  SOME\000\
  TOP\000\
  REF\000\
  REFTYPE\000\
  LIST\000\
  TAIL\000\
  HEAD\000\
  ISNIL\000\
  CONS\000\
  NIL\000\
  LETREC\000\
  FIX\000\
  STRING\000\
  FLOAT\000\
  TIMESFLOAT\000\
  CASE\000\
  OF\000\
  TAG\000\
  AS\000\
  UNIT\000\
  UNITTYPE\000\
  WHERE\000\
  IN\000\
  LET\000\
  BOOL\000\
  NAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LAM\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCUR\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCUR\000\
  LCURBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCUR\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  NEWLINE\000\
  DSEMI\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
                                        ( fun _ _   ->  [],emptyctx,emptystore                      )
# 628 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 132 "parser.mly"
                                        ( let _,ctx',s'     = _1 [] emptystore in pr_ctx ctx';
                                          fun _ _   ->  [],ctx',s'                                  )
# 638 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 134 "parser.mly"
                                        ( fun ctx s ->  [],ctx,s                                    )
# 646 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'oneREPL) in
    Obj.repr(
# 135 "parser.mly"
                                        ( let _,ev_ctx,s    = _1 [] emptystore in   
                                          let cmds,_        = _2 ev_ctx in 
                                          let ev_ctx',s'    = process_commands ev_ctx s cmds in 
                                          fun _ _   ->  [],ev_ctx',s'                               )
# 657 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 140 "parser.mly"
                                        ( fun ctx ->  let cmd,ctx'    = _1 ctx in [cmd],ctx'        )
# 665 "parser.ml"
               : 'oneREPL))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'oneREPL) in
    Obj.repr(
# 141 "parser.mly"
                                        ( fun ctx ->  let cmd,ctx'    = _1 ctx in 
                                                      let cmds,ctx''  = _3 ctx' in cmd::cmds,ctx''  )
# 675 "parser.ml"
               : 'oneREPL))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 148 "parser.mly"
                                        ( fun ctx ->  [],ctx                                        )
# 682 "parser.ml"
               : Syntax.context -> (Syntax.command list * Syntax.context)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.context -> (Syntax.command list * Syntax.context)) in
    Obj.repr(
# 149 "parser.mly"
                                        ( fun ctx ->  let cmd,ctx  = _1 ctx in 
                                                      let cmds,ctx = _3 ctx in cmd::cmds,ctx        )
# 692 "parser.ml"
               : Syntax.context -> (Syntax.command list * Syntax.context)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TmWrap) in
    Obj.repr(
# 156 "parser.mly"
                                        ( fun ctx ->  let t = _1 ctx in Eval(tmInfo t,t),ctx        )
# 699 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 157 "parser.mly"
                                        ( fun ctx ->  Bind(_1.i,_1.v,_2 ctx),addname ctx _1.v       )
# 707 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 158 "parser.mly"
                                        ( fun ctx ->  Bind(_1.i,_1.v,_2 ctx),addname ctx _1.v       )
# 715 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "parser.mly"
                                        ( fun ctx ->  BindTyVar                                     )
# 721 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Ty) in
    Obj.repr(
# 161 "parser.mly"
                                        ( fun ctx ->  BindTyAbb(_2 ctx)                             )
# 729 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Ty) in
    Obj.repr(
# 163 "parser.mly"
                                        ( fun ctx ->  BindTmVar(_2 ctx)                             )
# 737 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 164 "parser.mly"
                                        ( fun ctx ->  BindTmAbb(_2 ctx,None)                        )
# 745 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrTy) in
    Obj.repr(
# 170 "parser.mly"
                                        ( _1                                                        )
# 752 "parser.ml"
               : 'Ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Ty) in
    Obj.repr(
# 171 "parser.mly"
                                        ( fun ctx ->  TyAll(_2.v,_4(addname ctx _2.v))              )
# 762 "parser.ml"
               : 'Ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Ty) in
    Obj.repr(
# 172 "parser.mly"
                                        ( fun ctx ->  TySome(_2.v,_4(addname ctx _2.v))             )
# 772 "parser.ml"
               : 'Ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATy) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrTy) in
    Obj.repr(
# 174 "parser.mly"
                                        ( fun ctx ->  TyArr(_1 ctx, _3 ctx)                         )
# 781 "parser.ml"
               : 'ArrTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATy) in
    Obj.repr(
# 175 "parser.mly"
                                        ( _1                                                        )
# 788 "parser.ml"
               : 'ArrTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 177 "parser.mly"
                                        ( fun ctx ->  if isbound ctx _1.v 
                                            then  TyVar(name2index _1.i ctx _1.v, ctxlen ctx)       
                                            else  TyId(_1.v)                                        )
# 797 "parser.ml"
               : 'ATy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Ty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 180 "parser.mly"
                                        ( _2                                                        )
# 806 "parser.ml"
               : 'ATy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 181 "parser.mly"
                                        ( fun ctx ->  TyTop                                         )
# 813 "parser.ml"
               : 'ATy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 182 "parser.mly"
                                        ( fun ctx ->  TyFloat                                       )
# 820 "parser.ml"
               : 'ATy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 183 "parser.mly"
                                        ( fun ctx ->  TyString                                      )
# 827 "parser.ml"
               : 'ATy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 184 "parser.mly"
                                        ( fun ctx ->  TyBool                                        )
# 834 "parser.ml"
               : 'ATy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 185 "parser.mly"
                                        ( fun ctx ->  TyNat                                         )
# 841 "parser.ml"
               : 'ATy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 186 "parser.mly"
                                        ( fun ctx ->  TyUnit                                        )
# 848 "parser.ml"
               : 'ATy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TyFlds) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 187 "parser.mly"
                                        ( fun ctx ->  TyRecord(_2 ctx 1)                            )
# 857 "parser.ml"
               : 'ATy))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "parser.mly"
                                        ( fun ctx ->  fun i -> []                                   )
# 863 "parser.ml"
               : 'TyFlds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NETyFlds) in
    Obj.repr(
# 192 "parser.mly"
                                        ( _1                                                        )
# 870 "parser.ml"
               : 'TyFlds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TyFld) in
    Obj.repr(
# 194 "parser.mly"
                                        ( fun ctx ->  fun i -> [_1 ctx i]                           )
# 877 "parser.ml"
               : 'NETyFlds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'TyFld) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NETyFlds) in
    Obj.repr(
# 195 "parser.mly"
                                        ( fun ctx ->  fun i -> (_1 ctx i)::(_3 ctx (i+1))           )
# 886 "parser.ml"
               : 'NETyFlds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Ty) in
    Obj.repr(
# 197 "parser.mly"
                                        ( fun ctx ->  fun i -> (_1.v, _3 ctx)                       )
# 895 "parser.ml"
               : 'TyFld))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Ty) in
    Obj.repr(
# 198 "parser.mly"
                                        ( fun ctx ->  fun i -> (string_of_int i, _1 ctx)            )
# 902 "parser.ml"
               : 'TyFld))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'TmWrap) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 205 "parser.mly"
                                        ( fun ctx ->  TmLet(_2,_3.v,_5 ctx,_1(addname ctx _3.v))    )
# 913 "parser.ml"
               : 'TmWrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'Tm) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 206 "parser.mly"
                                        ( fun ctx ->  TmLet(_2,_3.v,_5 ctx,_1(addname ctx _3.v))    )
# 924 "parser.ml"
               : 'TmWrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 207 "parser.mly"
                                        ( _1                                                        )
# 931 "parser.ml"
               : 'TmWrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTm) in
    Obj.repr(
# 209 "parser.mly"
                                        ( _1                                                        )
# 938 "parser.ml"
               : 'Tm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Tm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 210 "parser.mly"
                                        ( fun ctx ->  TmLet(_1,_2.v,_4 ctx,_6(addname ctx _2.v))    )
# 950 "parser.ml"
               : 'Tm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Tm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 211 "parser.mly"
                                        ( fun ctx ->  TmLet(_1,"_",_4 ctx,_6(addname ctx"_"))       )
# 962 "parser.ml"
               : 'Tm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 212 "parser.mly"
                                        ( fun ctx ->  TmAbs(_1,_2.v,_4 ctx,_6(addname ctx _2.v))    )
# 974 "parser.ml"
               : 'Tm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 213 "parser.mly"
                                        ( fun ctx ->  TmTAbs(_1,_2.v,_4(addname ctx _2.v))          )
# 984 "parser.ml"
               : 'Tm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string  Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string  Support.Error.withinfo) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'Tm) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 215 "parser.mly"
                                        ( fun ctx ->  let ctx' = addname(addname ctx _3.v)_5.v in 
                                                      TmUnpack(_1,_3.v,_5.v,_8 ctx,_10 ctx')        )
# 1001 "parser.ml"
               : 'Tm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Tm) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Tm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 217 "parser.mly"
                                        ( fun ctx ->  TmIf(_1,_2 ctx,_4 ctx,_6 ctx)                 )
# 1013 "parser.ml"
               : 'Tm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Tm) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 218 "parser.mly"
                                        ( fun ctx ->  let ctx' = addname ctx _2.v in 
                                                      TmLet(_1,_2.v,
                                                        TmFix(_1,TmAbs(_1,_2.v,_4 ctx,_6 ctx')),
                                                        _8 ctx')                                    )
# 1030 "parser.ml"
               : 'Tm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTm) in
    Obj.repr(
# 223 "parser.mly"
                                        ( _1                                                        )
# 1037 "parser.ml"
               : 'AppTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTm) in
    Obj.repr(
# 224 "parser.mly"
                                        ( fun ctx ->  TmTimesfloat(_2,_1 ctx,_3 ctx)                )
# 1046 "parser.ml"
               : 'AppTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTm) in
    Obj.repr(
# 225 "parser.mly"
                                        ( fun ctx ->  TmFix(_1, _2 ctx )                            )
# 1054 "parser.ml"
               : 'AppTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTm) in
    Obj.repr(
# 226 "parser.mly"
                                        ( fun ctx ->  TmSucc(_1, _2 ctx )                           )
# 1062 "parser.ml"
               : 'AppTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTm) in
    Obj.repr(
# 227 "parser.mly"
                                        ( fun ctx ->  TmPred(_1, _2 ctx )                           )
# 1070 "parser.ml"
               : 'AppTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTm) in
    Obj.repr(
# 228 "parser.mly"
                                        ( fun ctx ->  TmIsZero(_1, _2 ctx)                          )
# 1078 "parser.ml"
               : 'AppTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTm) in
    Obj.repr(
# 229 "parser.mly"
                                        ( fun ctx ->  TmApp(tmInfo (_1 ctx),_1 ctx,_2 ctx)          )
# 1086 "parser.ml"
               : 'AppTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'AppTm) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Ty) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 230 "parser.mly"
                                        ( fun ctx ->  TmTApp(tmInfo (_1 ctx),_1 ctx,_3 ctx)         )
# 1096 "parser.ml"
               : 'AppTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 232 "parser.mly"
                                        ( fun ctx ->  TmProj(_2, _1 ctx, _3.v)                      )
# 1105 "parser.ml"
               : 'PathTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int     Support.Error.withinfo) in
    Obj.repr(
# 233 "parser.mly"
                                        ( fun ctx ->  TmProj(_2, _1 ctx, soi _3.v)                  )
# 1114 "parser.ml"
               : 'PathTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTm) in
    Obj.repr(
# 234 "parser.mly"
                                        ( _1                                                        )
# 1121 "parser.ml"
               : 'PathTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Ty) in
    Obj.repr(
# 236 "parser.mly"
                                        ( fun ctx ->  TmAscribe(_2,_1 ctx,_3 ctx)                   )
# 1130 "parser.ml"
               : 'AscribeTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATm) in
    Obj.repr(
# 237 "parser.mly"
                                        ( _1                                                        )
# 1137 "parser.ml"
               : 'AscribeTm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TmSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 239 "parser.mly"
                                        ( _2                                                        )
# 1146 "parser.ml"
               : 'ATm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'Ty) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'Tm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Ty) in
    Obj.repr(
# 240 "parser.mly"
                                        ( fun ctx ->  TmPack(_1,_3 ctx,_5 ctx,_8 ctx)               )
# 1160 "parser.ml"
               : 'ATm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Flds) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 241 "parser.mly"
                                        ( fun ctx ->  TmRecord(_1,_2 ctx 1)                         )
# 1169 "parser.ml"
               : 'ATm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 242 "parser.mly"
                                        ( fun ctx ->  TmVar(_1.i,name2index _1.i ctx _1.v,ctxlen ctx))
# 1176 "parser.ml"
               : 'ATm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 243 "parser.mly"
                                        ( fun ctx ->  TmString(_1.i,_1.v)                           )
# 1183 "parser.ml"
               : 'ATm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float   Support.Error.withinfo) in
    Obj.repr(
# 244 "parser.mly"
                                        ( fun ctx ->  TmFloat(_1.i,_1.v)                            )
# 1190 "parser.ml"
               : 'ATm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 245 "parser.mly"
                                        ( fun ctx ->  TmUnit(_1)                                    )
# 1197 "parser.ml"
               : 'ATm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 246 "parser.mly"
                                        ( fun ctx ->  TmTrue(_1)                                    )
# 1204 "parser.ml"
               : 'ATm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 247 "parser.mly"
                                        ( fun ctx ->  TmFalse(_1)                                   )
# 1211 "parser.ml"
               : 'ATm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int     Support.Error.withinfo) in
    Obj.repr(
# 248 "parser.mly"
                                        ( fun ctx ->  let rec f = function
                                                          | 0 -> TmZero(_1.i)
                                                          | n -> TmSucc(_1.i,f(n-1))in f _1.v       )
# 1220 "parser.ml"
               : 'ATm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 252 "parser.mly"
                                        ( _1                                                        )
# 1227 "parser.ml"
               : 'TmSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Tm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TmSeq) in
    Obj.repr(
# 253 "parser.mly"
                                        ( fun ctx ->  TmApp(_2,TmAbs(_2,"_",TyUnit,_3(addname ctx"_")),_1 ctx) )
# 1236 "parser.ml"
               : 'TmSeq))
; (fun __caml_parser_env ->
    Obj.repr(
# 256 "parser.mly"
                                        ( fun ctx -> fun i -> []                                    )
# 1242 "parser.ml"
               : 'Flds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFlds) in
    Obj.repr(
# 257 "parser.mly"
                                        ( _1                                                        )
# 1249 "parser.ml"
               : 'Flds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Fld) in
    Obj.repr(
# 259 "parser.mly"
                                        ( fun ctx -> fun i -> [ _1 ctx i ]                          )
# 1256 "parser.ml"
               : 'NEFlds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Fld) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFlds) in
    Obj.repr(
# 260 "parser.mly"
                                        ( fun ctx -> fun i -> (_1 ctx i)::(_3 ctx(i+1))             )
# 1265 "parser.ml"
               : 'NEFlds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 262 "parser.mly"
                                        ( fun ctx -> fun i -> (_1.v, _3 ctx)                        )
# 1274 "parser.ml"
               : 'Fld))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Tm) in
    Obj.repr(
# 263 "parser.mly"
                                        ( fun ctx -> fun i -> (string_of_int i, _1 ctx)             )
# 1281 "parser.ml"
               : 'Fld))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry input *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.context -> (Syntax.command list * Syntax.context))
let input (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store))
