type token =
  | LOAD of (string  Support.Error.withinfo)
  | SHOWCONTEXT of (Support.Error.info)
  | TOP of (Support.Error.info)
  | REF of (Support.Error.info)
  | REFTYPE of (Support.Error.info)
  | LIST of (Support.Error.info)
  | TAIL of (Support.Error.info)
  | HEAD of (Support.Error.info)
  | ISNIL of (Support.Error.info)
  | CONS of (Support.Error.info)
  | NIL of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | FIX of (Support.Error.info)
  | STRING of (Support.Error.info)
  | FLOAT of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | TAG of (Support.Error.info)
  | AS of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | UNITTYPE of (Support.Error.info)
  | WHERE of (Support.Error.info)
  | IN of (Support.Error.info)
  | LET of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | NAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | UCID of (string  Support.Error.withinfo)
  | LCID of (string  Support.Error.withinfo)
  | INTV of (int     Support.Error.withinfo)
  | FLOATV of (float   Support.Error.withinfo)
  | STRINGV of (string  Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)
  | NEWLINE of (Support.Error.info)
  | DOUBLESEMI of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Format
open Support.Error
open Support.Pervasive
open Syntax
open Type
open Eval
open Interpreter 

let pe = print_endline 
# 96 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* LOAD *);
  258 (* SHOWCONTEXT *);
  259 (* TOP *);
  260 (* REF *);
  261 (* REFTYPE *);
  262 (* LIST *);
  263 (* TAIL *);
  264 (* HEAD *);
  265 (* ISNIL *);
  266 (* CONS *);
  267 (* NIL *);
  268 (* LETREC *);
  269 (* FIX *);
  270 (* STRING *);
  271 (* FLOAT *);
  272 (* TIMESFLOAT *);
  273 (* CASE *);
  274 (* OF *);
  275 (* TAG *);
  276 (* AS *);
  277 (* UNIT *);
  278 (* UNITTYPE *);
  279 (* WHERE *);
  280 (* IN *);
  281 (* LET *);
  282 (* BOOL *);
  283 (* NAT *);
  284 (* SUCC *);
  285 (* PRED *);
  286 (* ISZERO *);
  287 (* LAMBDA *);
  288 (* IF *);
  289 (* THEN *);
  290 (* ELSE *);
  291 (* TRUE *);
  292 (* FALSE *);
  293 (* UCID *);
  294 (* LCID *);
  295 (* INTV *);
  296 (* FLOATV *);
  297 (* STRINGV *);
  298 (* APOSTROPHE *);
  299 (* DQUOTE *);
  300 (* ARROW *);
  301 (* BANG *);
  302 (* BARGT *);
  303 (* BARRCURLY *);
  304 (* BARRSQUARE *);
  305 (* COLON *);
  306 (* COLONCOLON *);
  307 (* COLONEQ *);
  308 (* COLONHASH *);
  309 (* COMMA *);
  310 (* DARROW *);
  311 (* DDARROW *);
  312 (* DOT *);
    0 (* EOF *);
  313 (* EQ *);
  314 (* EQEQ *);
  315 (* EXISTS *);
  316 (* GT *);
  317 (* HASH *);
  318 (* LCURLY *);
  319 (* LCURLYBAR *);
  320 (* LEFTARROW *);
  321 (* LPAREN *);
  322 (* LSQUARE *);
  323 (* LSQUAREBAR *);
  324 (* LT *);
  325 (* RCURLY *);
  326 (* RPAREN *);
  327 (* RSQUARE *);
  328 (* SEMI *);
  329 (* SLASH *);
  330 (* STAR *);
  331 (* TRIANGLE *);
  332 (* USCORE *);
  333 (* VBAR *);
  334 (* NEWLINE *);
  335 (* DOUBLESEMI *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\003\000\003\000\001\000\
\001\000\004\000\004\000\004\000\006\000\006\000\007\000\007\000\
\008\000\008\000\010\000\010\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\013\000\
\012\000\012\000\014\000\014\000\015\000\015\000\005\000\005\000\
\005\000\016\000\016\000\017\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\020\000\020\000\020\000\021\000\021\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\022\000\022\000\023\000\023\000\024\000\024\000\
\025\000\025\000\000\000\000\000"

let yylen = "\002\000\
\000\000\002\000\003\000\002\000\002\000\002\000\003\000\001\000\
\003\000\001\000\002\000\002\000\000\000\002\000\002\000\002\000\
\001\000\002\000\003\000\001\000\001\000\003\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\003\000\002\000\003\000\
\000\000\001\000\001\000\003\000\003\000\001\000\005\000\005\000\
\001\000\001\000\003\000\007\000\001\000\003\000\004\000\003\000\
\006\000\006\000\006\000\006\000\008\000\004\000\003\000\003\000\
\003\000\001\000\003\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\003\000\003\000\001\000\003\000\001\000\003\000\
\003\000\007\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\001\000\003\000\000\000\001\000\001\000\003\000\
\003\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\080\000\000\000\000\000\081\000\
\077\000\076\000\000\000\008\000\000\000\000\000\000\000\091\000\
\000\000\000\000\000\000\000\000\000\000\000\000\069\000\000\000\
\075\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\000\000\012\000\000\000\
\000\000\000\000\000\000\086\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\000\000\000\004\000\005\000\000\000\023\000\000\000\
\000\000\025\000\024\000\028\000\026\000\027\000\021\000\000\000\
\000\000\000\000\000\000\017\000\000\000\056\000\055\000\057\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\015\000\000\000\000\000\073\000\000\000\000\000\072\000\000\000\
\009\000\000\000\000\000\000\000\000\000\070\000\000\000\067\000\
\068\000\003\000\000\000\006\000\018\000\031\000\000\000\038\000\
\000\000\034\000\000\000\000\000\000\000\032\000\000\000\054\000\
\000\000\000\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\088\000\084\000\000\000\000\000\000\000\007\000\000\000\
\029\000\000\000\022\000\030\000\019\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\036\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\074\000\000\000\000\000\000\000\000\000"

let yydgoto = "\003\000\
\032\000\040\000\085\000\033\000\034\000\060\000\063\000\136\000\
\035\000\100\000\101\000\137\000\044\000\138\000\139\000\147\000\
\148\000\036\000\037\000\038\000\039\000\071\000\067\000\068\000\
\069\000"

let yysindex = "\058\000\
\001\000\000\000\000\000\044\255\212\254\212\254\212\254\212\254\
\212\254\019\255\044\255\041\003\000\000\228\254\044\255\044\255\
\044\255\035\255\041\003\000\000\000\000\020\255\007\255\000\000\
\000\000\000\000\044\255\000\000\083\003\041\003\052\255\000\000\
\042\255\038\255\248\254\190\002\076\255\245\254\000\000\162\255\
\000\000\059\255\024\255\044\255\044\255\044\255\044\255\000\000\
\067\255\059\255\244\254\066\255\069\255\059\255\059\255\059\255\
\075\255\054\255\024\255\000\000\024\255\041\003\000\000\059\255\
\072\255\083\255\064\255\000\000\081\255\000\255\070\255\079\255\
\001\000\099\255\101\255\041\003\125\003\059\255\024\255\044\255\
\030\255\000\000\062\255\000\000\000\000\247\254\000\000\116\255\
\024\255\000\000\000\000\000\000\000\000\000\000\000\000\211\255\
\024\255\211\255\073\255\000\000\102\255\000\000\000\000\000\000\
\044\255\024\255\077\255\041\003\041\003\024\255\041\003\000\000\
\000\000\083\255\041\003\000\000\083\003\041\003\000\000\041\003\
\000\000\092\255\094\255\083\255\044\255\000\000\059\255\000\000\
\000\000\000\000\255\002\000\000\000\000\000\000\103\255\000\000\
\085\255\000\000\104\255\088\255\095\255\000\000\116\255\000\000\
\108\255\129\255\000\000\091\255\249\254\250\254\121\255\238\254\
\083\255\000\000\000\000\221\254\041\003\041\003\000\000\024\255\
\000\000\211\255\000\000\000\000\000\000\041\003\123\255\077\255\
\041\003\041\003\041\003\041\003\165\255\083\255\083\255\000\000\
\000\000\004\255\144\255\000\000\083\255\083\255\083\255\083\255\
\024\255\041\003\126\255\000\000\083\255\135\255\125\003\044\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\255\182\002\000\000\
\000\000\000\000\000\000\000\000\127\255\000\000\000\000\000\000\
\000\000\041\255\224\254\149\003\099\000\159\000\000\000\195\000\
\000\000\219\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\001\000\000\000\000\000\000\083\001\143\001\203\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\002\
\064\004\049\255\000\000\000\000\136\255\134\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\067\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\137\255\
\000\000\152\255\000\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\193\003\171\003\000\000\127\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\254\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\189\003\000\000\000\000\000\000\000\000\
\058\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\021\255\025\255\000\000\
\000\000\000\000\000\000\000\000\211\003\233\003\251\003\255\003\
\000\000\000\000\000\000\000\000\017\004\000\000\000\000\109\003"

let yygindex = "\000\000\
\140\000\000\000\084\000\220\255\000\000\000\000\000\000\221\255\
\246\255\075\000\131\000\122\000\202\000\059\000\000\000\054\000\
\000\000\182\255\245\255\252\255\000\000\105\000\000\000\111\000\
\000\000"

let yytablesize = 1413
let yytable = "\042\000\
\028\000\051\000\125\000\086\000\080\000\107\000\050\000\099\000\
\058\000\052\000\054\000\055\000\056\000\076\000\075\000\172\000\
\169\000\170\000\066\000\070\000\041\000\043\000\064\000\112\000\
\173\000\113\000\087\000\186\000\088\000\089\000\076\000\078\000\
\102\000\103\000\104\000\105\000\076\000\090\000\091\000\041\000\
\076\000\076\000\076\000\126\000\081\000\092\000\041\000\053\000\
\076\000\093\000\094\000\114\000\076\000\134\000\009\000\061\000\
\049\000\035\000\001\000\002\000\095\000\140\000\131\000\062\000\
\013\000\124\000\035\000\128\000\129\000\132\000\145\000\118\000\
\057\000\039\000\151\000\127\000\059\000\040\000\020\000\021\000\
\013\000\041\000\024\000\025\000\026\000\096\000\111\000\013\000\
\097\000\072\000\074\000\098\000\039\000\144\000\086\000\079\000\
\040\000\149\000\150\000\039\000\152\000\090\000\076\000\040\000\
\153\000\029\000\066\000\070\000\030\000\156\000\089\000\031\000\
\010\000\073\000\081\000\106\000\192\000\090\000\087\000\010\000\
\078\000\089\000\108\000\110\000\176\000\109\000\089\000\016\000\
\115\000\090\000\091\000\076\000\116\000\117\000\016\000\120\000\
\122\000\092\000\123\000\119\000\130\000\093\000\094\000\142\000\
\146\000\143\000\174\000\175\000\157\000\188\000\158\000\160\000\
\095\000\161\000\164\000\178\000\162\000\163\000\181\000\182\000\
\183\000\184\000\082\000\083\000\166\000\004\000\167\000\168\000\
\005\000\006\000\007\000\008\000\009\000\010\000\011\000\189\000\
\171\000\096\000\012\000\179\000\097\000\187\000\013\000\098\000\
\185\000\190\000\014\000\078\000\191\000\015\000\016\000\017\000\
\018\000\019\000\092\000\085\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\083\000\087\000\033\000\027\000\045\000\
\046\000\047\000\048\000\033\000\121\000\087\000\159\000\088\000\
\089\000\165\000\133\000\141\000\177\000\180\000\155\000\029\000\
\090\000\091\000\030\000\154\000\000\000\031\000\000\000\000\000\
\092\000\000\000\000\000\000\000\093\000\094\000\000\000\000\000\
\084\000\000\000\000\000\000\000\000\000\000\000\000\000\095\000\
\135\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\000\000\000\000\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\000\000\000\000\
\096\000\012\000\000\000\097\000\000\000\013\000\098\000\000\000\
\000\000\014\000\000\000\000\000\015\000\016\000\017\000\018\000\
\019\000\000\000\000\000\020\000\021\000\022\000\023\000\024\000\
\025\000\026\000\000\000\000\000\000\000\027\000\000\000\020\000\
\000\000\000\000\000\000\000\000\020\000\000\000\020\000\000\000\
\020\000\020\000\000\000\020\000\020\000\000\000\029\000\000\000\
\000\000\030\000\000\000\000\000\031\000\020\000\020\000\020\000\
\020\000\000\000\020\000\020\000\020\000\020\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\020\000\000\000\020\000\
\000\000\020\000\000\000\000\000\020\000\020\000\000\000\000\000\
\020\000\000\000\020\000\000\000\000\000\020\000\000\000\000\000\
\020\000\020\000\020\000\020\000\020\000\071\000\000\000\000\000\
\000\000\020\000\071\000\020\000\071\000\000\000\000\000\071\000\
\000\000\071\000\071\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\071\000\071\000\071\000\000\000\
\071\000\071\000\071\000\071\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\000\000\071\000\000\000\071\000\
\000\000\000\000\071\000\000\000\000\000\000\000\071\000\000\000\
\071\000\000\000\000\000\071\000\000\000\000\000\071\000\071\000\
\071\000\058\000\071\000\000\000\000\000\000\000\000\000\071\000\
\058\000\071\000\000\000\058\000\000\000\058\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\058\000\058\000\058\000\000\000\058\000\058\000\058\000\058\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\000\000\058\000\000\000\058\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\000\000\058\000\000\000\000\000\058\000\
\000\000\000\000\058\000\058\000\058\000\061\000\058\000\000\000\
\000\000\000\000\000\000\058\000\061\000\058\000\000\000\061\000\
\000\000\061\000\061\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\061\000\061\000\061\000\061\000\000\000\
\061\000\061\000\061\000\061\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\061\000\000\000\061\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\000\000\000\
\061\000\000\000\000\000\061\000\000\000\000\000\061\000\061\000\
\061\000\060\000\061\000\000\000\000\000\000\000\000\000\061\000\
\060\000\061\000\000\000\060\000\000\000\060\000\060\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\060\000\060\000\060\000\000\000\060\000\060\000\060\000\060\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\000\000\060\000\000\000\060\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\000\000\000\060\000\000\000\000\000\060\000\
\000\000\000\000\060\000\060\000\060\000\063\000\060\000\000\000\
\000\000\000\000\000\000\060\000\063\000\060\000\000\000\063\000\
\000\000\063\000\063\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\063\000\063\000\063\000\000\000\
\063\000\063\000\063\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\063\000\000\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\063\000\000\000\
\063\000\000\000\000\000\063\000\000\000\000\000\063\000\063\000\
\063\000\064\000\063\000\000\000\000\000\000\000\000\000\063\000\
\064\000\063\000\000\000\064\000\000\000\064\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\064\000\064\000\064\000\000\000\064\000\064\000\064\000\064\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\000\000\064\000\000\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\000\000\064\000\000\000\000\000\064\000\
\000\000\000\000\064\000\064\000\064\000\065\000\064\000\000\000\
\000\000\000\000\000\000\064\000\065\000\064\000\000\000\065\000\
\000\000\065\000\065\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\065\000\065\000\065\000\000\000\
\065\000\065\000\065\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\000\000\065\000\000\000\065\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\000\000\
\065\000\000\000\000\000\065\000\000\000\000\000\065\000\065\000\
\065\000\062\000\065\000\000\000\000\000\000\000\000\000\065\000\
\062\000\065\000\000\000\062\000\000\000\062\000\062\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\062\000\062\000\062\000\000\000\062\000\062\000\062\000\062\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\000\000\062\000\000\000\062\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\000\000\062\000\000\000\000\000\062\000\
\000\000\000\000\062\000\062\000\062\000\066\000\062\000\000\000\
\000\000\000\000\000\000\062\000\066\000\062\000\000\000\066\000\
\000\000\066\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\066\000\066\000\066\000\000\000\
\066\000\066\000\066\000\066\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\000\000\066\000\000\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\066\000\000\000\
\066\000\000\000\000\000\066\000\000\000\000\000\066\000\066\000\
\066\000\059\000\066\000\000\000\000\000\000\000\000\000\066\000\
\059\000\066\000\000\000\059\000\000\000\059\000\059\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\059\000\059\000\059\000\000\000\059\000\059\000\059\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\000\000\059\000\000\000\059\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\000\000\059\000\000\000\000\000\059\000\
\075\000\000\000\059\000\059\000\059\000\075\000\059\000\000\000\
\009\000\075\000\075\000\059\000\075\000\059\000\000\000\000\000\
\000\000\000\000\013\000\000\000\000\000\000\000\000\000\000\000\
\075\000\075\000\000\000\075\000\075\000\075\000\075\000\000\000\
\020\000\021\000\000\000\041\000\024\000\025\000\026\000\000\000\
\075\000\000\000\075\000\000\000\000\000\075\000\000\000\000\000\
\077\000\000\000\000\000\075\000\000\000\000\000\075\000\000\000\
\000\000\075\000\000\000\029\000\000\000\075\000\030\000\000\000\
\000\000\031\000\004\000\000\000\075\000\005\000\006\000\007\000\
\008\000\009\000\010\000\011\000\000\000\000\000\000\000\012\000\
\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\
\000\000\000\000\015\000\016\000\017\000\018\000\019\000\000\000\
\000\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\000\000\000\000\000\000\027\000\004\000\000\000\000\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\000\000\000\000\
\000\000\012\000\000\000\000\000\029\000\013\000\000\000\030\000\
\000\000\014\000\031\000\000\000\015\000\016\000\017\000\018\000\
\019\000\000\000\000\000\020\000\021\000\000\000\041\000\024\000\
\025\000\026\000\000\000\000\000\000\000\027\000\004\000\000\000\
\000\000\005\000\006\000\007\000\008\000\009\000\010\000\011\000\
\000\000\000\000\000\000\012\000\000\000\000\000\029\000\013\000\
\000\000\030\000\000\000\014\000\031\000\000\000\015\000\016\000\
\017\000\018\000\019\000\000\000\000\000\020\000\021\000\000\000\
\065\000\024\000\025\000\026\000\000\000\000\000\044\000\027\000\
\004\000\000\000\000\000\044\000\044\000\000\000\000\000\009\000\
\000\000\011\000\000\000\000\000\000\000\044\000\044\000\000\000\
\029\000\013\000\000\000\030\000\000\000\000\000\031\000\000\000\
\015\000\016\000\017\000\000\000\000\000\044\000\000\000\020\000\
\021\000\044\000\041\000\024\000\025\000\026\000\045\000\000\000\
\044\000\027\000\000\000\045\000\045\000\000\000\000\000\000\000\
\000\000\044\000\044\000\000\000\044\000\045\000\045\000\000\000\
\000\000\044\000\029\000\044\000\046\000\030\000\000\000\000\000\
\031\000\046\000\046\000\000\000\000\000\045\000\000\000\000\000\
\000\000\045\000\000\000\046\000\046\000\000\000\042\000\000\000\
\045\000\000\000\048\000\042\000\042\000\000\000\000\000\048\000\
\048\000\045\000\045\000\046\000\045\000\042\000\042\000\046\000\
\000\000\048\000\048\000\045\000\049\000\000\000\046\000\000\000\
\000\000\049\000\049\000\000\000\000\000\042\000\000\000\046\000\
\046\000\042\000\046\000\049\000\049\000\048\000\000\000\000\000\
\042\000\046\000\050\000\000\000\048\000\000\000\000\000\050\000\
\050\000\042\000\042\000\000\000\042\000\048\000\048\000\049\000\
\048\000\050\000\050\000\042\000\051\000\000\000\049\000\048\000\
\052\000\051\000\051\000\000\000\000\000\052\000\052\000\049\000\
\049\000\000\000\049\000\051\000\051\000\050\000\000\000\052\000\
\052\000\049\000\053\000\000\000\050\000\000\000\000\000\053\000\
\053\000\000\000\000\000\000\000\000\000\050\000\050\000\051\000\
\050\000\053\000\053\000\052\000\000\000\000\000\051\000\050\000\
\000\000\000\000\052\000\000\000\000\000\000\000\000\000\051\000\
\051\000\000\000\051\000\052\000\052\000\053\000\052\000\000\000\
\000\000\051\000\075\000\000\000\053\000\052\000\000\000\075\000\
\000\000\000\000\000\000\075\000\075\000\053\000\053\000\000\000\
\053\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\000\000\000\000\075\000\075\000\000\000\075\000\075\000\075\000\
\075\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\075\000\000\000\075\000\000\000\075\000\000\000\000\000\075\000\
\000\000\000\000\000\000\000\000\000\000\075\000\000\000\000\000\
\075\000\000\000\000\000\075\000\075\000"

let yycheck = "\004\000\
\000\000\012\000\077\000\040\000\016\001\018\001\011\000\043\000\
\019\000\038\001\015\000\016\000\017\000\049\001\023\001\034\001\
\024\001\024\001\029\000\030\000\053\001\066\001\027\000\059\000\
\060\001\061\000\003\001\024\001\005\001\006\001\049\001\036\000\
\044\000\045\000\046\000\047\000\049\001\014\001\015\001\072\001\
\049\001\049\001\049\001\079\000\056\001\022\001\079\001\076\001\
\049\001\026\001\027\001\062\000\049\001\089\000\011\001\049\001\
\038\001\060\001\001\000\002\000\037\001\097\000\072\001\057\001\
\021\001\076\000\069\001\038\001\039\001\079\001\106\000\072\001\
\038\001\053\001\110\000\080\000\057\001\053\001\035\001\036\001\
\072\001\038\001\039\001\040\001\041\001\062\001\033\001\079\001\
\065\001\038\001\053\001\068\001\072\001\105\000\131\000\020\001\
\072\001\108\000\109\000\079\001\111\000\053\001\049\001\079\001\
\115\000\062\001\117\000\118\000\065\001\120\000\053\001\068\001\
\072\001\072\001\056\001\049\001\191\000\069\001\003\001\079\001\
\125\000\006\001\057\001\049\001\160\000\057\001\069\001\072\001\
\057\001\014\001\015\001\049\001\069\001\053\001\079\001\057\001\
\038\001\022\001\038\001\070\001\079\001\026\001\027\001\071\001\
\068\001\044\001\157\000\158\000\057\001\185\000\057\001\049\001\
\037\001\069\001\060\001\166\000\053\001\070\001\169\000\170\000\
\171\000\172\000\001\001\002\001\057\001\004\001\038\001\077\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\186\000\
\056\001\062\001\017\001\057\001\065\001\038\001\021\001\068\001\
\020\001\060\001\025\001\192\000\054\001\028\001\029\001\030\001\
\031\001\032\001\000\000\069\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\070\001\069\001\069\001\045\001\006\000\
\007\000\008\000\009\000\060\001\073\000\003\001\131\000\005\001\
\006\001\143\000\088\000\098\000\162\000\168\000\118\000\062\001\
\014\001\015\001\065\001\117\000\255\255\068\001\255\255\255\255\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\079\001\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\062\001\017\001\255\255\065\001\255\255\021\001\068\001\255\255\
\255\255\025\001\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\045\001\255\255\011\001\
\255\255\255\255\255\255\255\255\016\001\255\255\018\001\255\255\
\020\001\021\001\255\255\023\001\024\001\255\255\062\001\255\255\
\255\255\065\001\255\255\255\255\068\001\033\001\034\001\035\001\
\036\001\255\255\038\001\039\001\040\001\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\049\001\255\255\051\001\
\255\255\053\001\255\255\255\255\056\001\057\001\255\255\255\255\
\060\001\255\255\062\001\255\255\255\255\065\001\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\011\001\255\255\255\255\
\255\255\077\001\016\001\079\001\018\001\255\255\255\255\021\001\
\255\255\023\001\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\034\001\035\001\036\001\255\255\
\038\001\039\001\040\001\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\049\001\255\255\051\001\255\255\053\001\
\255\255\255\255\056\001\255\255\255\255\255\255\060\001\255\255\
\062\001\255\255\255\255\065\001\255\255\255\255\068\001\069\001\
\070\001\011\001\072\001\255\255\255\255\255\255\255\255\077\001\
\018\001\079\001\255\255\021\001\255\255\023\001\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\035\001\036\001\255\255\038\001\039\001\040\001\041\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\255\255\051\001\255\255\053\001\255\255\255\255\255\255\255\255\
\255\255\255\255\060\001\255\255\062\001\255\255\255\255\065\001\
\255\255\255\255\068\001\069\001\070\001\011\001\072\001\255\255\
\255\255\255\255\255\255\077\001\018\001\079\001\255\255\021\001\
\255\255\023\001\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\034\001\035\001\036\001\255\255\
\038\001\039\001\040\001\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\049\001\255\255\051\001\255\255\053\001\
\255\255\255\255\255\255\255\255\255\255\255\255\060\001\255\255\
\062\001\255\255\255\255\065\001\255\255\255\255\068\001\069\001\
\070\001\011\001\072\001\255\255\255\255\255\255\255\255\077\001\
\018\001\079\001\255\255\021\001\255\255\023\001\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\035\001\036\001\255\255\038\001\039\001\040\001\041\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\255\255\051\001\255\255\053\001\255\255\255\255\255\255\255\255\
\255\255\255\255\060\001\255\255\062\001\255\255\255\255\065\001\
\255\255\255\255\068\001\069\001\070\001\011\001\072\001\255\255\
\255\255\255\255\255\255\077\001\018\001\079\001\255\255\021\001\
\255\255\023\001\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\034\001\035\001\036\001\255\255\
\038\001\039\001\040\001\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\049\001\255\255\051\001\255\255\053\001\
\255\255\255\255\255\255\255\255\255\255\255\255\060\001\255\255\
\062\001\255\255\255\255\065\001\255\255\255\255\068\001\069\001\
\070\001\011\001\072\001\255\255\255\255\255\255\255\255\077\001\
\018\001\079\001\255\255\021\001\255\255\023\001\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\035\001\036\001\255\255\038\001\039\001\040\001\041\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\255\255\051\001\255\255\053\001\255\255\255\255\255\255\255\255\
\255\255\255\255\060\001\255\255\062\001\255\255\255\255\065\001\
\255\255\255\255\068\001\069\001\070\001\011\001\072\001\255\255\
\255\255\255\255\255\255\077\001\018\001\079\001\255\255\021\001\
\255\255\023\001\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\034\001\035\001\036\001\255\255\
\038\001\039\001\040\001\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\049\001\255\255\051\001\255\255\053\001\
\255\255\255\255\255\255\255\255\255\255\255\255\060\001\255\255\
\062\001\255\255\255\255\065\001\255\255\255\255\068\001\069\001\
\070\001\011\001\072\001\255\255\255\255\255\255\255\255\077\001\
\018\001\079\001\255\255\021\001\255\255\023\001\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\035\001\036\001\255\255\038\001\039\001\040\001\041\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\255\255\051\001\255\255\053\001\255\255\255\255\255\255\255\255\
\255\255\255\255\060\001\255\255\062\001\255\255\255\255\065\001\
\255\255\255\255\068\001\069\001\070\001\011\001\072\001\255\255\
\255\255\255\255\255\255\077\001\018\001\079\001\255\255\021\001\
\255\255\023\001\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\034\001\035\001\036\001\255\255\
\038\001\039\001\040\001\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\049\001\255\255\051\001\255\255\053\001\
\255\255\255\255\255\255\255\255\255\255\255\255\060\001\255\255\
\062\001\255\255\255\255\065\001\255\255\255\255\068\001\069\001\
\070\001\011\001\072\001\255\255\255\255\255\255\255\255\077\001\
\018\001\079\001\255\255\021\001\255\255\023\001\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\035\001\036\001\255\255\038\001\039\001\040\001\041\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\255\255\051\001\255\255\053\001\255\255\255\255\255\255\255\255\
\255\255\255\255\060\001\255\255\062\001\255\255\255\255\065\001\
\011\001\255\255\068\001\069\001\070\001\016\001\072\001\255\255\
\011\001\020\001\021\001\077\001\023\001\079\001\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\255\255\255\255\255\255\
\035\001\036\001\255\255\038\001\039\001\040\001\041\001\255\255\
\035\001\036\001\255\255\038\001\039\001\040\001\041\001\255\255\
\051\001\255\255\053\001\255\255\255\255\056\001\255\255\255\255\
\051\001\255\255\255\255\062\001\255\255\255\255\065\001\255\255\
\255\255\068\001\255\255\062\001\255\255\072\001\065\001\255\255\
\255\255\068\001\004\001\255\255\079\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\017\001\
\255\255\255\255\255\255\021\001\255\255\255\255\255\255\025\001\
\255\255\255\255\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\255\255\255\255\255\255\045\001\004\001\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\062\001\021\001\255\255\065\001\
\255\255\025\001\068\001\255\255\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\045\001\004\001\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\017\001\255\255\255\255\062\001\021\001\
\255\255\065\001\255\255\025\001\068\001\255\255\028\001\029\001\
\030\001\031\001\032\001\255\255\255\255\035\001\036\001\255\255\
\038\001\039\001\040\001\041\001\255\255\255\255\018\001\045\001\
\004\001\255\255\255\255\023\001\024\001\255\255\255\255\011\001\
\255\255\013\001\255\255\255\255\255\255\033\001\034\001\255\255\
\062\001\021\001\255\255\065\001\255\255\255\255\068\001\255\255\
\028\001\029\001\030\001\255\255\255\255\049\001\255\255\035\001\
\036\001\053\001\038\001\039\001\040\001\041\001\018\001\255\255\
\060\001\045\001\255\255\023\001\024\001\255\255\255\255\255\255\
\255\255\069\001\070\001\255\255\072\001\033\001\034\001\255\255\
\255\255\077\001\062\001\079\001\018\001\065\001\255\255\255\255\
\068\001\023\001\024\001\255\255\255\255\049\001\255\255\255\255\
\255\255\053\001\255\255\033\001\034\001\255\255\018\001\255\255\
\060\001\255\255\018\001\023\001\024\001\255\255\255\255\023\001\
\024\001\069\001\070\001\049\001\072\001\033\001\034\001\053\001\
\255\255\033\001\034\001\079\001\018\001\255\255\060\001\255\255\
\255\255\023\001\024\001\255\255\255\255\049\001\255\255\069\001\
\070\001\053\001\072\001\033\001\034\001\053\001\255\255\255\255\
\060\001\079\001\018\001\255\255\060\001\255\255\255\255\023\001\
\024\001\069\001\070\001\255\255\072\001\069\001\070\001\053\001\
\072\001\033\001\034\001\079\001\018\001\255\255\060\001\079\001\
\018\001\023\001\024\001\255\255\255\255\023\001\024\001\069\001\
\070\001\255\255\072\001\033\001\034\001\053\001\255\255\033\001\
\034\001\079\001\018\001\255\255\060\001\255\255\255\255\023\001\
\024\001\255\255\255\255\255\255\255\255\069\001\070\001\053\001\
\072\001\033\001\034\001\053\001\255\255\255\255\060\001\079\001\
\255\255\255\255\060\001\255\255\255\255\255\255\255\255\069\001\
\070\001\255\255\072\001\069\001\070\001\053\001\072\001\255\255\
\255\255\079\001\011\001\255\255\060\001\079\001\255\255\016\001\
\255\255\255\255\255\255\020\001\021\001\069\001\070\001\255\255\
\072\001\255\255\255\255\255\255\255\255\255\255\255\255\079\001\
\255\255\255\255\035\001\036\001\255\255\038\001\039\001\040\001\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\255\255\051\001\255\255\053\001\255\255\255\255\056\001\
\255\255\255\255\255\255\255\255\255\255\062\001\255\255\255\255\
\065\001\255\255\255\255\068\001\069\001"

let yynames_const = "\
  "

let yynames_block = "\
  LOAD\000\
  SHOWCONTEXT\000\
  TOP\000\
  REF\000\
  REFTYPE\000\
  LIST\000\
  TAIL\000\
  HEAD\000\
  ISNIL\000\
  CONS\000\
  NIL\000\
  LETREC\000\
  FIX\000\
  STRING\000\
  FLOAT\000\
  TIMESFLOAT\000\
  CASE\000\
  OF\000\
  TAG\000\
  AS\000\
  UNIT\000\
  UNITTYPE\000\
  WHERE\000\
  IN\000\
  LET\000\
  BOOL\000\
  NAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LAMBDA\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  NEWLINE\000\
  DOUBLESEMI\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
                                        ( fun _ _   ->  [],emptyctx,emptystore                  )
# 752 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 127 "parser.mly"
                                        ( let file   = _2.v in 
                                          fun ctx s ->  [],ctx,s                                )
# 761 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 129 "parser.mly"
                                        ( let _,ctx',s' = _1 [] emptystore in pr_ctx ctx';
                                          fun _ _  ->  [],ctx',s'                               )
# 771 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 131 "parser.mly"
                                        ( fun ctx s ->  [],ctx,s                                )
# 779 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'oneREPL) in
    Obj.repr(
# 132 "parser.mly"
                                        ( let _,ev_ctx,s    = _1 [] emptystore in   
                                          let cmds,_      = _2 ev_ctx in 
                                          let ev_ctx',s'   = process_commands ev_ctx s cmds in 
                                          fun _ _  -> [],ev_ctx',s'  )
# 790 "parser.ml"
               : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 137 "parser.mly"
                                        ( fun ctx ->  let cmd,ctx'    = _1 ctx in [cmd],ctx'  )
# 798 "parser.ml"
               : 'oneREPL))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'oneREPL) in
    Obj.repr(
# 138 "parser.mly"
                                        ( fun ctx ->  let cmd,ctx'    = _1 ctx in 
                                                      let cmds,ctx''  = _3 ctx' in cmd::cmds,ctx''  )
# 808 "parser.ml"
               : 'oneREPL))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 145 "parser.mly"
                                        ( fun ctx   ->  [],ctx                                  )
# 815 "parser.ml"
               : Syntax.context -> (Syntax.command list * Syntax.context)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.context -> (Syntax.command list * Syntax.context)) in
    Obj.repr(
# 146 "parser.mly"
                                        ( fun ctx   ->  let cmd,ctx  = _1 ctx in 
                                                        let cmds,ctx = _3 ctx in cmd::cmds,ctx  )
# 825 "parser.ml"
               : Syntax.context -> (Syntax.command list * Syntax.context)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TermWrap) in
    Obj.repr(
# 152 "parser.mly"
                                        ( fun ctx   ->  let t = _1 ctx in Eval(tmInfo t,t),ctx  )
# 832 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 153 "parser.mly"
                                        ( fun ctx   ->  Bind(_1.i,_1.v,_2 ctx),addname ctx _1.v )
# 840 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 154 "parser.mly"
                                        ( fun ctx   ->  Bind(_1.i,_1.v,_2 ctx),addname ctx _1.v )
# 848 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parser.mly"
                                        ( fun ctx   ->  BindTyVar                               )
# 854 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 157 "parser.mly"
                                        ( fun ctx   ->  BindTyAbb(_2 ctx)                       )
# 862 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 159 "parser.mly"
                                        ( fun ctx   ->  BindTmVar(_2 ctx)                         )
# 870 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 160 "parser.mly"
                                        ( fun ctx   ->  BindTmAbb(_2 ctx,None)                  )
# 878 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 165 "parser.mly"
                                        ( _1                                                    )
# 885 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 166 "parser.mly"
                                        ( fun ctx   ->  TyRef(_2 ctx)                           )
# 893 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 168 "parser.mly"
                                        ( fun ctx   ->  TyArr(_1 ctx, _3 ctx)                   )
# 902 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 169 "parser.mly"
                                        ( _1                                                    )
# 909 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 171 "parser.mly"
                                        ( fun ctx   ->  if isnamebound ctx _1.v 
                                            then    TyVar(name2index _1.i ctx _1.v, ctxlen ctx) 
                                            else    TyId(_1.v)                                  )
# 918 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 174 "parser.mly"
                                        ( _2                                                    )
# 927 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 175 "parser.mly"
                                        ( fun ctx   ->  TyTop                                   )
# 934 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 176 "parser.mly"
                                        ( fun ctx   ->  TyFloat                                 )
# 941 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 177 "parser.mly"
                                        ( fun ctx   ->  TyString                                )
# 948 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 178 "parser.mly"
                                        ( fun ctx   ->  TyBool                                  )
# 955 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 179 "parser.mly"
                                        ( fun ctx   ->  TyNat                                   )
# 962 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 180 "parser.mly"
                                        ( fun ctx   ->  TyUnit                                  )
# 969 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TyFields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 181 "parser.mly"
                                        ( fun ctx   ->  TyRecord(_2 ctx 1)                      )
# 978 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TyFields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 182 "parser.mly"
                                        ( fun ctx   ->  TyVariant(_2 ctx 1)                     )
# 987 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 183 "parser.mly"
                                        ( fun ctx   ->  TyList(_2 ctx)                          )
# 995 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 185 "parser.mly"
                                        ( fun ctx   ->  TyList(_2 ctx)                          )
# 1004 "parser.ml"
               : 'LType))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "parser.mly"
                                        ( fun ctx   ->  fun i -> []                             )
# 1010 "parser.ml"
               : 'TyFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NETyFields) in
    Obj.repr(
# 188 "parser.mly"
                                        ( _1                                                    )
# 1017 "parser.ml"
               : 'TyFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TyField) in
    Obj.repr(
# 190 "parser.mly"
                                        ( fun ctx   ->  fun i -> [_1 ctx i]                     )
# 1024 "parser.ml"
               : 'NETyFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'TyField) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NETyFields) in
    Obj.repr(
# 191 "parser.mly"
                                        ( fun ctx   ->  fun i -> (_1 ctx i)::(_3 ctx (i+1))     )
# 1033 "parser.ml"
               : 'NETyFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 193 "parser.mly"
                                        ( fun ctx   ->  fun i -> (_1.v, _3 ctx)                 )
# 1042 "parser.ml"
               : 'TyField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 194 "parser.mly"
                                        ( fun ctx   ->  fun i -> (string_of_int i, _1 ctx)      )
# 1049 "parser.ml"
               : 'TyField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'TermWrap) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 197 "parser.mly"
                                        ( fun ctx   ->  TmLet(_2,_3.v,_5 ctx,_1(addname ctx _3.v)) )
# 1060 "parser.ml"
               : 'TermWrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 198 "parser.mly"
                                        ( fun ctx   ->  TmLet(_2,_3.v,_5 ctx,_1(addname ctx _3.v)) )
# 1071 "parser.ml"
               : 'TermWrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 199 "parser.mly"
                                        ( _1                                                    )
# 1078 "parser.ml"
               : 'TermWrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 201 "parser.mly"
                                        ( fun ctx   ->  [_1 ctx]                                )
# 1085 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 202 "parser.mly"
                                        ( fun ctx   ->  (_1 ctx)::(_3 ctx)                      )
# 1094 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string  Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 204 "parser.mly"
                                        ( fun ctx   ->  (_2.v,(_4.v,_7(addname ctx _4.v)))      )
# 1107 "parser.ml"
               : 'Case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 206 "parser.mly"
                                        ( _1                                                    )
# 1114 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 207 "parser.mly"
                                        ( fun ctx   ->  TmAssign(_2,_1 ctx,_3 ctx)              )
# 1123 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 208 "parser.mly"
                                        ( fun ctx   ->  TmCase(_1,_2 ctx,_4 ctx)                )
# 1133 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 209 "parser.mly"
                                        ( fun ctx   ->  TmLet(_2, "_", _3 ctx, _1 ctx)          )
# 1142 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 210 "parser.mly"
                                        ( fun ctx   ->  TmLet(_1,_2.v,_4 ctx,_6(addname ctx _2.v)))
# 1154 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 211 "parser.mly"
                                        ( fun ctx   ->  TmLet(_1,"_",_4 ctx,_6(addname ctx"_")) )
# 1166 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 212 "parser.mly"
                                        ( fun ctx   ->  TmAbs(_1,_2.v,_4 ctx,_6(addname ctx _2.v)))
# 1178 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 213 "parser.mly"
                                        ( fun ctx   ->  TmIf(_1,_2 ctx,_4 ctx,_6 ctx)           )
# 1190 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 215 "parser.mly"
                                        ( fun ctx   ->  let ctx' = addname ctx _2.v in 
                                                        TmLet(_1,_2.v,TmFix(_1,TmAbs(_1,_2.v,_4 ctx,_6 ctx')),_8 ctx'))
# 1205 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LType) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ATerm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 217 "parser.mly"
                                        ( fun ctx   ->  TmCons(_1,_2 ctx,_3 ctx,_4 ctx)         )
# 1215 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'LType) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 218 "parser.mly"
                                        ( fun ctx   ->  TmHead(_1,_2 ctx,_3 ctx)                )
# 1224 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'LType) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 219 "parser.mly"
                                        ( fun ctx   ->  TmTail(_1,_2 ctx,_3 ctx)                )
# 1233 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'LType) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 220 "parser.mly"
                                        ( fun ctx   ->  TmIsNil(_1,_2 ctx,_3 ctx)               )
# 1242 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 222 "parser.mly"
                                        ( _1                                                    )
# 1249 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 223 "parser.mly"
                                        ( fun ctx   ->  TmTimesfloat(_2,_1 ctx,_3 ctx)          )
# 1258 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 224 "parser.mly"
                                        ( fun ctx   ->  TmFix(_1, _2 ctx )                      )
# 1266 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 225 "parser.mly"
                                        ( fun ctx   ->  TmRef(_1, _2 ctx )                      )
# 1274 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 226 "parser.mly"
                                        ( fun ctx   ->  TmDeref(_1, _2 ctx )                    )
# 1282 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 227 "parser.mly"
                                        ( fun ctx   ->  TmSucc(_1, _2 ctx )                     )
# 1290 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 228 "parser.mly"
                                        ( fun ctx   ->  TmPred(_1, _2 ctx )                     )
# 1298 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 229 "parser.mly"
                                        ( fun ctx   ->  TmIsZero(_1, _2 ctx)                    )
# 1306 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 230 "parser.mly"
                                        ( fun ctx   ->  let t=_1 ctx in TmApp(tmInfo t,t,_2 ctx))
# 1314 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 232 "parser.mly"
                                        ( fun ctx   ->  TmProj(_2, _1 ctx, _3.v)                )
# 1323 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int     Support.Error.withinfo) in
    Obj.repr(
# 233 "parser.mly"
                                        ( fun ctx   ->  TmProj(_2, _1 ctx, soi _3.v)            )
# 1332 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 234 "parser.mly"
                                        ( _1                                                    )
# 1339 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 236 "parser.mly"
                                        ( fun ctx   ->  TmAscribe(_2,_1 ctx,_3 ctx)             )
# 1348 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 237 "parser.mly"
                                        ( _1                                                    )
# 1355 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 239 "parser.mly"
                                        ( _2                                                    )
# 1364 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 240 "parser.mly"
                                        ( fun ctx   ->  TmRecord(_1,_2 ctx 1)                   )
# 1373 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string  Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 241 "parser.mly"
                                        ( fun ctx   ->  TmTag(_1,_2.v,_4 ctx,_7 ctx)            )
# 1386 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 242 "parser.mly"
                                        ( fun ctx   ->  TmVar(_1.i,name2index _1.i ctx _1.v,ctxlen ctx) )
# 1393 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string  Support.Error.withinfo) in
    Obj.repr(
# 243 "parser.mly"
                                        ( fun ctx   ->  TmString(_1.i,_1.v)                     )
# 1400 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float   Support.Error.withinfo) in
    Obj.repr(
# 244 "parser.mly"
                                        ( fun ctx   ->  TmFloat(_1.i,_1.v)                      )
# 1407 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 245 "parser.mly"
                                        ( fun ctx   ->  TmUnit(_1)                              )
# 1414 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 246 "parser.mly"
                                        ( fun ctx   ->  TmTrue(_1)                              )
# 1421 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 247 "parser.mly"
                                        ( fun ctx   ->  TmFalse(_1)                             )
# 1428 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int     Support.Error.withinfo) in
    Obj.repr(
# 248 "parser.mly"
                                        ( fun ctx   ->  let rec f = function
                                                            | 0 -> TmZero(_1.i)
                                                            | n -> TmSucc(_1.i,f(n-1))in f _1.v )
# 1437 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'LType) in
    Obj.repr(
# 251 "parser.mly"
                                        ( fun ctx   ->  TmNil(_1,_2 ctx)                        )
# 1445 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 253 "parser.mly"
                                        ( _1                                                    )
# 1452 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 254 "parser.mly"
                                        ( fun ctx   ->  TmApp(_2,TmAbs(_2,"_",TyUnit,_3(addname ctx"_")),_1 ctx) )
# 1461 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    Obj.repr(
# 257 "parser.mly"
                                        ( fun ctx   ->  fun i -> []                             )
# 1467 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 258 "parser.mly"
                                        ( _1                                                    )
# 1474 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 260 "parser.mly"
                                        ( fun ctx   -> fun i -> [ _1 ctx i ]                    )
# 1481 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 261 "parser.mly"
                                        ( fun ctx   -> fun i -> (_1 ctx i)::(_3 ctx(i+1))       )
# 1490 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string  Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 263 "parser.mly"
                                        ( fun ctx   -> fun i -> (_1.v, _3 ctx)                  )
# 1499 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 264 "parser.mly"
                                        ( fun ctx   -> fun i -> (string_of_int i, _1 ctx)       )
# 1506 "parser.ml"
               : 'Field))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry input *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.context -> (Syntax.command list * Syntax.context))
let input (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Syntax.context -> Eval.store -> (Syntax.command list * Syntax.context * Eval.store))
