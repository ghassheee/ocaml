# 1 "lexer.mll"
 
open Support.Error

let reservedWords = [
  (* Keywords *)
    ("Float",   fun i -> Parser.FLOAT i);
    ("*.",      fun i -> Parser.TIMESFLOAT i);
    ("String",  fun i -> Parser.STRING i);
    ("case",    fun i -> Parser.CASE i);
    ("of",      fun i -> Parser.OF i);
    ("as",      fun i -> Parser.AS i);
    ("unit",    fun i -> Parser.UNIT i);
    ("Unit",    fun i -> Parser.UNITTYPE i);
    ("where",   fun i -> Parser.WHERE i);
    ("in",      fun i -> Parser.IN i);
    ("let",     fun i -> Parser.LET i);
    ("Bool",    fun i -> Parser.BOOL i);
    ("Nat",     fun i -> Parser.NAT i);
    ("\\",      fun i -> Parser.LAMBDA i);
    ("if",      fun i -> Parser.IF i);
    ("then",    fun i -> Parser.THEN i);
    ("else",    fun i -> Parser.ELSE i);
    ("true",    fun i -> Parser.TRUE i);
    ("false",   fun i -> Parser.FALSE i);
    ("succ",    fun i -> Parser.SUCC i);
    ("pred",    fun i -> Parser.PRED i);
    ("iszero",  fun i -> Parser.ISZERO i);
  
  (* Symbols *)
    ("_",       fun i -> Parser.USCORE i);
    ("'",       fun i -> Parser.APOSTROPHE i);
    ("\"",      fun i -> Parser.DQUOTE i);
    ("!",       fun i -> Parser.BANG i);
    ("#",       fun i -> Parser.HASH i);
    ("$",       fun i -> Parser.TRIANGLE i);
    ("*",       fun i -> Parser.STAR i);
    ("|",       fun i -> Parser.VBAR i);
    (".",       fun i -> Parser.DOT i);
    (";",       fun i -> Parser.SEMI i);
    (",",       fun i -> Parser.COMMA i);
    ("/",       fun i -> Parser.SLASH i);
    (":",       fun i -> Parser.COLON i);
    ("::",      fun i -> Parser.COLONCOLON i);
    ("=",       fun i -> Parser.EQ i);
    ("==",      fun i -> Parser.EQEQ i);
    ("[",       fun i -> Parser.LSQUARE i); 
    ("<",       fun i -> Parser.LT i);
    ("{",       fun i -> Parser.LCURLY i); 
    ("(",       fun i -> Parser.LPAREN i); 
    ("<-",      fun i -> Parser.LEFTARROW i); 
    ("{|",      fun i -> Parser.LCURLYBAR i); 
    ("[|",      fun i -> Parser.LSQUAREBAR i); 
    ("}",       fun i -> Parser.RCURLY i);
    (")",       fun i -> Parser.RPAREN i);
    ("]",       fun i -> Parser.RSQUARE i);
    (">",       fun i -> Parser.GT i);
    ("|}",      fun i -> Parser.BARRCURLY i);
    ("|>",      fun i -> Parser.BARGT i);
    ("|]",      fun i -> Parser.BARRSQUARE i);
    ("\n",      fun i -> Parser.NEWLINE i); 
    (";;",      fun i -> Parser.DOUBLESEMI i); 

  (* Special compound symbols: *)
    (":=",      fun i -> Parser.COLONEQ i);
    ("->",      fun i -> Parser.ARROW i);
    ("=>",      fun i -> Parser.DARROW i);
    ("==>",     fun i -> Parser.DDARROW i);
]

(* Support functions *)

type buildfun               =   info -> Parser.token
type hoge                   =   (string,buildfun) Hashtbl.t
let  symbolTable:hoge       =   Hashtbl.create 1024
let _                       =   List.iter (fun(str,f)->Hashtbl.add symbolTable str f) reservedWords
let fos                     =   float_of_string
let ios                     =   int_of_string 
let initCapital str         =   let s=String.get str 0 in s>='A'&&s<='Z'  

let createID i str          =   (* info -> string -> token *)
  try   Hashtbl.find symbolTable str i
  with _ -> if initCapital str then Parser.UCID {i=i;v=str} else Parser.LCID {i=i;v=str}

let lineno                  =   ref 1
and depth                   =   ref 0
and start                   =   ref 0
and filename                =   ref ""
and startLex                =   ref dummyinfo
let create inFile stream    =   if not(Filename.is_implicit inFile) 
                                    then filename   := inFile
                                    else filename   := Filename.concat (Sys.getcwd()) inFile;
                                lineno := 1; start := 0; Lexing.from_channel stream
let newline lexbuf          =   incr lineno; start := (Lexing.lexeme_start lexbuf)
let info    lexbuf          =   createInfo (!filename) (!lineno) (Lexing.lexeme_start lexbuf - !start)
let text                    =   Lexing.lexeme
let stringBuffer            =   ref (String.create 2048)
let stringEnd               =   ref 0
let resetStr ()             =   stringEnd := 0
let addStr ch               =
    let x                       =   !stringEnd in
    let buffer                  =   !stringBuffer in
    if x=String.length buffer 
    then begin
        let newBuffer   = String.create (x*2) in
        String.blit buffer 0 newBuffer 0 x;
        String.set newBuffer x ch;
        stringBuffer    := newBuffer;
        stringEnd       := x+1
    end else begin
        String.set buffer x ch;
        stringEnd       := x+1
    end
let getStr ()                   = String.sub (!stringBuffer) 0 (!stringEnd)
let extractLineno yytxt offset  = ios(String.sub yytxt offset(String.length yytxt-offset))
let out_of_char x fi            = if x>255 then error fi"Illegal Char" else Char.chr x 

# 119 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\240\255\243\255\245\255\246\255\022\000\068\000\092\000\
    \007\000\102\000\008\000\072\000\116\000\091\000\186\000\218\000\
    \095\000\039\001\253\255\001\000\102\000\153\000\004\000\254\255\
    \049\001\059\001\242\255\251\255\248\255\082\000\158\000\244\255\
    \005\000\241\255\145\000\251\255\252\255\253\255\099\000\106\000\
    \255\255\254\255\141\000\251\255\252\255\253\255\254\255\255\255\
    \083\001\249\255\098\001\251\255\252\255\253\255\254\255\255\255\
    \108\001\250\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\009\000\009\000\008\000\
    \009\000\008\000\009\000\009\000\008\000\009\000\008\000\006\000\
    \009\000\003\000\255\255\015\000\009\000\000\000\255\255\255\255\
    \255\255\005\000\255\255\255\255\255\255\007\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\003\000\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\006\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\000\000\000\000\255\255\255\255\000\000\
    \255\255\000\000\036\000\000\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
    \049\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\018\000\018\000\021\000\019\000\018\000\031\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\004\000\003\000\004\000\007\000\007\000\007\000\004\000\
    \020\000\004\000\016\000\007\000\004\000\012\000\004\000\005\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\014\000\006\000\013\000\011\000\004\000\004\000\
    \033\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\008\000\007\000\004\000\004\000\015\000\
    \007\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\010\000\009\000\004\000\007\000\030\000\
    \007\000\007\000\007\000\028\000\028\000\029\000\028\000\007\000\
    \028\000\007\000\007\000\007\000\007\000\027\000\026\000\023\000\
    \028\000\007\000\041\000\007\000\040\000\028\000\007\000\044\000\
    \007\000\007\000\007\000\035\000\000\000\000\000\000\000\007\000\
    \007\000\007\000\021\000\018\000\028\000\021\000\022\000\030\000\
    \031\000\000\000\030\000\032\000\000\000\000\000\007\000\047\000\
    \000\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
    \007\000\021\000\000\000\038\000\007\000\000\000\030\000\000\000\
    \039\000\000\000\007\000\028\000\000\000\000\000\007\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \007\000\000\000\000\000\000\000\007\000\000\000\000\000\028\000\
    \007\000\000\000\007\000\000\000\000\000\000\000\007\000\007\000\
    \007\000\000\000\007\000\028\000\007\000\007\000\000\000\007\000\
    \000\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \007\000\000\000\007\000\000\000\007\000\000\000\000\000\028\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\000\000\000\000\007\000\000\000\
    \000\000\000\000\007\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\000\000\007\000\000\000\
    \007\000\015\000\000\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\024\000\000\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\052\000\000\000\000\000\
    \000\000\000\000\051\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\046\000\000\000\000\000\
    \000\000\037\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\055\000\000\000\000\000\000\000\000\000\000\000\054\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\019\000\000\000\000\000\022\000\032\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \007\000\007\000\007\000\008\000\010\000\011\000\011\000\007\000\
    \013\000\007\000\009\000\009\000\009\000\016\000\016\000\020\000\
    \029\000\009\000\038\000\009\000\039\000\013\000\007\000\042\000\
    \012\000\012\000\012\000\034\000\255\255\255\255\255\255\012\000\
    \009\000\012\000\021\000\021\000\009\000\021\000\021\000\030\000\
    \030\000\255\255\030\000\030\000\255\255\255\255\012\000\042\000\
    \255\255\255\255\012\000\255\255\255\255\255\255\255\255\255\255\
    \007\000\021\000\255\255\034\000\007\000\255\255\030\000\255\255\
    \034\000\255\255\009\000\009\000\255\255\255\255\009\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \012\000\255\255\255\255\255\255\012\000\255\255\255\255\013\000\
    \007\000\255\255\007\000\255\255\255\255\255\255\014\000\014\000\
    \014\000\255\255\009\000\009\000\009\000\014\000\255\255\014\000\
    \255\255\042\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \012\000\255\255\012\000\255\255\014\000\255\255\255\255\014\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\015\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\255\255\255\255\014\000\255\255\
    \255\255\255\255\014\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\255\255\014\000\255\255\
    \014\000\015\000\255\255\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\017\000\255\255\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\048\000\255\255\255\255\
    \255\255\255\255\048\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\042\000\255\255\255\255\
    \255\255\034\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\048\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\048\000\255\255\255\255\255\255\255\255\255\255\048\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\048\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 132 "lexer.mll"
                            ( token lexbuf                                          )
# 327 "lexer.ml"

  | 1 ->
# 133 "lexer.mll"
                            ( Parser.UNIT(info lexbuf)                              )
# 332 "lexer.ml"

  | 2 ->
# 134 "lexer.mll"
                            ( newline lexbuf; token lexbuf                          )
# 337 "lexer.ml"

  | 3 ->
# 135 "lexer.mll"
                            ( Parser.INTV{i=info lexbuf;v=ios(text lexbuf)}         )
# 342 "lexer.ml"

  | 4 ->
# 136 "lexer.mll"
                            ( Parser.TIMESFLOAT(info lexbuf)                        )
# 347 "lexer.ml"

  | 5 ->
# 137 "lexer.mll"
                            ( Parser.FLOATV{i=info lexbuf;v=fos(text lexbuf)}       )
# 352 "lexer.ml"

  | 6 ->
# 138 "lexer.mll"
                            ( createID (info lexbuf) (text lexbuf)                  )
# 357 "lexer.ml"

  | 7 ->
# 140 "lexer.mll"
                            ( createID (info lexbuf) (text lexbuf)                  )
# 362 "lexer.ml"

  | 8 ->
# 141 "lexer.mll"
                            ( createID (info lexbuf) (text lexbuf)                  )
# 367 "lexer.ml"

  | 9 ->
# 142 "lexer.mll"
                            ( createID (info lexbuf) (text lexbuf)                  )
# 372 "lexer.ml"

  | 10 ->
# 143 "lexer.mll"
                            ( resetStr(); startLex:=info lexbuf; string lexbuf      )
# 377 "lexer.ml"

  | 11 ->
# 144 "lexer.mll"
                            ( Parser.DOUBLESEMI(info lexbuf)                        )
# 382 "lexer.ml"

  | 12 ->
# 145 "lexer.mll"
                            ( Parser.EOF(info lexbuf)                               )
# 387 "lexer.ml"

  | 13 ->
# 146 "lexer.mll"
                            ( error (info lexbuf) "Unmatched end of comment"        )
# 392 "lexer.ml"

  | 14 ->
# 147 "lexer.mll"
                            ( depth:=1;startLex:=info lexbuf;comment lexbuf;token lexbuf )
# 397 "lexer.ml"

  | 15 ->
# 148 "lexer.mll"
                            ( error (info lexbuf) "Illegal character"               )
# 402 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 34
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 151 "lexer.mll"
                            ( depth:=succ !depth; comment lexbuf                    )
# 414 "lexer.ml"

  | 1 ->
# 152 "lexer.mll"
                            ( depth:=pred !depth; if !depth>0 then comment lexbuf   )
# 419 "lexer.ml"

  | 2 ->
# 153 "lexer.mll"
                            ( error (!startLex) "Comment not terminated"            )
# 424 "lexer.ml"

  | 3 ->
# 154 "lexer.mll"
                            ( comment lexbuf                                        )
# 429 "lexer.ml"

  | 4 ->
# 155 "lexer.mll"
                            ( newline lexbuf; comment lexbuf                        )
# 434 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 42
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 158 "lexer.mll"
                            ( Parser.STRINGV{i= !startLex; v=getStr()}              )
# 446 "lexer.ml"

  | 1 ->
# 159 "lexer.mll"
                            ( error(!startLex)"String not terminated"               )
# 451 "lexer.ml"

  | 2 ->
# 160 "lexer.mll"
                            ( addStr(escaped lexbuf)              ; string lexbuf   )
# 456 "lexer.ml"

  | 3 ->
# 161 "lexer.mll"
                            ( addStr('\n') ; newline lexbuf       ; string lexbuf   )
# 461 "lexer.ml"

  | 4 ->
# 162 "lexer.mll"
                            ( addStr(Lexing.lexeme_char lexbuf 0) ; string lexbuf   )
# 466 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and escaped lexbuf =
   __ocaml_lex_escaped_rec lexbuf 48
and __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 164 "lexer.mll"
                          ( '\n'                                                  )
# 478 "lexer.ml"

  | 1 ->
# 165 "lexer.mll"
                          ( '\t'                                                  )
# 483 "lexer.ml"

  | 2 ->
# 166 "lexer.mll"
                           ( '\\'                                                  )
# 488 "lexer.ml"

  | 3 ->
# 167 "lexer.mll"
                            ( '\034'                                                )
# 493 "lexer.ml"

  | 4 ->
# 168 "lexer.mll"
                           ( '\''                                                  )
# 498 "lexer.ml"

  | 5 ->
# 169 "lexer.mll"
                            ( out_of_char (ios(text lexbuf))(info lexbuf)           )
# 503 "lexer.ml"

  | 6 ->
# 170 "lexer.mll"
                            ( error (info lexbuf) "Illegal character constant"      )
# 508 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state

;;

